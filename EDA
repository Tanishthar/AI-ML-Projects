{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1MCXO9aaaWc4SpIerS-QYvJahQdwWV9D6","timestamp":1723831033404},{"file_id":"1WRt1bWJw8jSuvEG1Q1aqCiBEXwPnosyY","timestamp":1723748197528},{"file_id":"1V3_Aos-ZT9w0NSzMP7FL4xSfEs_np0th","timestamp":1723654767418},{"file_id":"1Kvv7lSLKhTJA24CnUGH0o9SszcVyJtVr","timestamp":1694364608379}],"collapsed_sections":["ITOnbgXJ0il5","fc5m48dMWkST"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"9e2a110c09ef4af09a017ac01b8fd0ea":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_c34bad554d2a401481010cafa1d8affc","IPY_MODEL_35ab2d94f8ed4ee386615aa1aac1ede6","IPY_MODEL_b9bbd78ac08f468d863d2c950011cc7a"],"layout":"IPY_MODEL_82ead034fe8346239205e036adfd55fe"}},"c34bad554d2a401481010cafa1d8affc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d539941715c54f7691c292fa57520cec","placeholder":"​","style":"IPY_MODEL_593027644a164a2bab6a5131dd2642ea","value":"Summarize dataset: 100%"}},"35ab2d94f8ed4ee386615aa1aac1ede6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_824e3db70cbe4ad197ad7ef99e4d921d","max":5,"min":0,"orientation":"horizontal","style":"IPY_MODEL_98c696ea9f2642f3a70aaced6471c501","value":5}},"b9bbd78ac08f468d863d2c950011cc7a":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b42118b8591e48739f9610282de1f685","placeholder":"​","style":"IPY_MODEL_1f3b68f0b6fe414c9c2768394aa0eb34","value":" 82/82 [00:23&lt;00:00,  1.86it/s, Completed]"}},"82ead034fe8346239205e036adfd55fe":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d539941715c54f7691c292fa57520cec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"593027644a164a2bab6a5131dd2642ea":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"824e3db70cbe4ad197ad7ef99e4d921d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"98c696ea9f2642f3a70aaced6471c501":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b42118b8591e48739f9610282de1f685":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1f3b68f0b6fe414c9c2768394aa0eb34":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3f60d11296844de0a88b75c727a13f81":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_380cce85e0a34f1f9e576931d09cbbd0","IPY_MODEL_881a34d5d1d540009a5a50fb5121514e","IPY_MODEL_d853aaf2c2f94f33ad9ce78a6e472e59"],"layout":"IPY_MODEL_cde8ab44c75c469e9501b71f99e010e9"}},"380cce85e0a34f1f9e576931d09cbbd0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0e5423aeb1ee4eb3b713dcf2eb0cea4b","placeholder":"​","style":"IPY_MODEL_349da5ed5bde4a74baffd928a9c9daf5","value":"Generate report structure: 100%"}},"881a34d5d1d540009a5a50fb5121514e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_5f742282a9274804ad2d0e1d3682b7ed","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_c118a0e6568947b0a675afa513c0225b","value":1}},"d853aaf2c2f94f33ad9ce78a6e472e59":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_283599cf5b49483e90d4f7c3873c56d0","placeholder":"​","style":"IPY_MODEL_6fd7deb0b4b2420a9778f0ea2549b75b","value":" 1/1 [00:07&lt;00:00,  7.35s/it]"}},"cde8ab44c75c469e9501b71f99e010e9":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0e5423aeb1ee4eb3b713dcf2eb0cea4b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"349da5ed5bde4a74baffd928a9c9daf5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5f742282a9274804ad2d0e1d3682b7ed":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"c118a0e6568947b0a675afa513c0225b":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"283599cf5b49483e90d4f7c3873c56d0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6fd7deb0b4b2420a9778f0ea2549b75b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c2540c5b0fbb4de69c4d36d8371f6198":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_47c6cd1655bd484d8e144655c0df57b6","IPY_MODEL_fd5341b599c241aeb53e6fe574c9f42a","IPY_MODEL_fef31242fb6f41be9c26dc0b20c222a2"],"layout":"IPY_MODEL_44e11a68618b4a9c9df220fc80969d99"}},"47c6cd1655bd484d8e144655c0df57b6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_d63c1c7711e84190bd4a2fe927707172","placeholder":"​","style":"IPY_MODEL_38de6f75e9fd40b0a112d06ad3c12f34","value":"Render HTML: 100%"}},"fd5341b599c241aeb53e6fe574c9f42a":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_92646c89e7dd4e10a69b25e4a69a9f5e","max":1,"min":0,"orientation":"horizontal","style":"IPY_MODEL_df82d5afff464a00b1eafd1d9fe74086","value":1}},"fef31242fb6f41be9c26dc0b20c222a2":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_7eed5c4c6fc0450e965756c8e1714834","placeholder":"​","style":"IPY_MODEL_d0bc69ddead24d68a1b9f75b26e869bf","value":" 1/1 [00:02&lt;00:00,  2.55s/it]"}},"44e11a68618b4a9c9df220fc80969d99":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d63c1c7711e84190bd4a2fe927707172":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"38de6f75e9fd40b0a112d06ad3c12f34":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"92646c89e7dd4e10a69b25e4a69a9f5e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"df82d5afff464a00b1eafd1d9fe74086":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"7eed5c4c6fc0450e965756c8e1714834":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d0bc69ddead24d68a1b9f75b26e869bf":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# Python"],"metadata":{"id":"ITOnbgXJ0il5"}},{"cell_type":"markdown","source":["Python is a simple to use, [*very-high-level language*](https://www.javatpoint.com/classification-of-programming-languages). This means that it is easy for Programmers to understand Python compared to the machine.\n","\n","So, no worrying about semi-colons, wohooooo!! 🎉\n","But we now worry about indentation :/\n","\n","\n","It is very easy to compile, esp on Colab, giving you a lot of structure and support for large programs, and it is by far the most popular language to learn ML.\n","\n","\n","You will really start to appreciate the many many libraries you can import and just use directly once you get some practice. You don't get all this in C/C++/Java 😅\n","\n"],"metadata":{"id":"QghnYypswwn4"}},{"cell_type":"markdown","source":["Personally, Python is a fav because of the [EXTENSIVE official documentation](https://docs.python.org/3/tutorial/index.html) they provide.\n","\n","Agar isko abhi se properly navigate kar paaye toh rp? Ez 😉\n","\n","Highly recommend you to go through this in your free time. Good to have it bookmarked to keep handy while coding.\n"],"metadata":{"id":"tschWlB1E6Q2"}},{"cell_type":"markdown","source":["Let's start!"],"metadata":{"id":"z-rcbXjiFLBb"}},{"cell_type":"markdown","source":["##printing & data-types"],"metadata":{"id":"hn9TKga_0KKa"}},{"cell_type":"markdown","source":["As is tradition, first we write a basic \"Hello, World!\" in Python."],"metadata":{"id":"xFY12Iny6_4C"}},{"cell_type":"code","source":["# Put your text in the double quotes given below.\n","print(\"Hello, World!\")\n","\n","# Now, to experiment.\n","# Does this work if you put the string in single quotes?\n","print('Hi, I am Tanish')\n","\n","# How about '''Like THIS'''?\n","print('''Hi, I am Tanish''')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h-7FiNJ0FhmB","executionInfo":{"status":"ok","timestamp":1723835042710,"user_tz":-330,"elapsed":437,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"c3fea555-61d5-4c6c-b5e8-82a3757d6993"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, World!\n","Hi, I am Tanish\n","Hi, I am Tanish\n"]}]},{"cell_type":"markdown","source":["When this ran, notice that all three \"Hello, World!\"s are on different lines.\n","\n","(Remember println/print in Java?)"],"metadata":{"id":"82FeBMScGAon"}},{"cell_type":"markdown","source":["We usually write comments in Python using"],"metadata":{"id":"RUuo8fIEGVyJ"}},{"cell_type":"code","source":["# These hashtags (try selecting a block of code and Ctrl+/)\n","'''\n","or\n","\n","These strings for multiline comments.\n","If you don't assign this String to a variable, Python is lenient (& dangerous)\n","enough to ignore your stray String.\n","\n","'''"],"metadata":{"id":"obAnSIvRGfLR"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["You need to now assign the Strings:\n","\n","\"Synapse is the best!\",\n","\n","\"AI will not take ML Developers' jobs!!\" and\n","\n","\"She's just busy!!!\"\n","\n","to variables, and print them on the same line, using the function print()"],"metadata":{"id":"oYCjcRJ3Ib4M"}},{"cell_type":"code","source":["affirmation_1 = \"Synapse is the best\"\n","\n","affirmation_2 = \"AI will not take ML Developer's jobs!!\"\n","\n","affirmation_3 = \"She's just busy!!!\"\n","\n","# First, only use one print() function call, without concatenating the Strings.\n","print(affirmation_1)\n","\n","# Now, try concatenating the strings\n","print(affirmation_1 + affirmation_2 + affirmation_3)\n","\n","# Notice where you got spaces readymade, between sentences?\n","# No\n","print(affirmation_1 + ' ' + affirmation_2+ ' ' + affirmation_3)\n","\n","# Now you must use a different print() call for each string\n","# The output must still be on the same line!!\n","print(affirmation_1, end = ' ')\n","print(affirmation_2, end = ' ')\n","print(affirmation_3)\n","\n","# Finally, print these using a for loop?\n","tan = [affirmation_1, affirmation_2, affirmation_3]\n","for i in range(0, 3):\n","  print(tan[i])\n"],"metadata":{"id":"5B4AdUicIGx-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723918113927,"user_tz":-330,"elapsed":9,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"cfebaa14-94e3-4657-fce3-49563259712a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Synapse is the best\n","Synapse is the bestAI will not take ML Developer's jobs!!She's just busy!!!\n","Synapse is the best AI will not take ML Developer's jobs!! She's just busy!!!\n","Synapse is the best AI will not take ML Developer's jobs!! She's just busy!!!\n","Synapse is the best\n","AI will not take ML Developer's jobs!!\n","She's just busy!!!\n"]}]},{"cell_type":"markdown","source":["**Look up f-strings and r-strings in Python. Write a line on each.**\n","**Answer:**\n","\n","---\n","\n","\n","f-strings: can be said to be an upgrade to str.format() wherein we can directly input values to the string without having to enter the given values later on and just adding the placeholders beforehand. Backslashes cannot be used in this type of string.\n","\n","---\n","\n","\n","r-strings: is a special type of string that doesn't consider the backslash character as an escape sequence. The r-string is used when we are working with regular expressions."],"metadata":{"id":"G59xz9wr6gmq"}},{"cell_type":"code","source":["# But what if we don't want a number's every single unnecessary digit?\n","print(\"Try printing different numbers with configs here! %5.2f\" %(1))\n","print(\"Try printing different numbers with configs here! %2.4f\" %(1000.264848986))\n","print(\"Try printing different numbers with configs here! %5.4f\" %(563659.9531848))\n","print(\"Try printing different numbers with configs here! %2.4f\" %(1.59774))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zCf7HlcXPeZi","executionInfo":{"status":"ok","timestamp":1724441385887,"user_tz":-330,"elapsed":691,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"826f354c-ddaf-44aa-c1d2-d96ec5ba6e14"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Try printing different numbers with configs here!  1.00\n","Try printing different numbers with configs here! 1000.2648\n","Try printing different numbers with configs here! 563659.9532\n","Try printing different numbers with configs here! 1.5977\n"]}]},{"cell_type":"markdown","source":["Here, .4 toh samjha hoga.\n","\n","**Explain what you think the 5 does.**\n","\n","**Answer:** The number before the decimal point decides the minimum width required of the number to be formatted.\n"],"metadata":{"id":"6Ld_LhI3P5Bx"}},{"cell_type":"markdown","source":["While most production / project code does not take a direct input, ever, the input() function is your cin/scanf/scanner input method for Python.\n","\n","It returns the user entered inputs as a **String**, and prints the message you give it as an argument while asking for the input."],"metadata":{"id":"QpIBhP1g6tT8"}},{"cell_type":"code","source":["# Ask for a name, and assign it to a variable.\n","name = input(\"What is your name? \")\n","\n","# Be like Tom Marvolo Riddle, and say Hi to the name you got.\n","print(\"Hi, %s, How has your day been?\" %name) # Here we used string formatting to insert the name\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1ZgKWUXJKku3","executionInfo":{"status":"ok","timestamp":1723834831780,"user_tz":-330,"elapsed":8688,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f28e3723-4999-491e-b5a4-04cf37048dcc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["What is your name? Tanish Shah\n","Hi, Tanish Shah, How has your day been?\n"]}]},{"cell_type":"markdown","source":["You do need integer/other inputs too, sometimes! Strings won't always do.\n","\n"],"metadata":{"id":"pZFVjTNfN7mh"}},{"cell_type":"code","source":["# Take an integer input, using the input() function and converting it to int\n","num = int(input(\"Enter a integer input: \"))\n","print()\n","\n","# Now, print the integer and its square, to see that you can use the integer\n","print(\"Number: %d\" %num)\n","print(\"Square: %d\" %(num*num))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7aBv8Z2RN4Kd","executionInfo":{"status":"ok","timestamp":1723834982714,"user_tz":-330,"elapsed":3685,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"c27a8bc1-b72e-43b4-e660-f4719d67c961"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a integer input: 33\n","\n","Number: 33\n","Square: 1089\n"]}]},{"cell_type":"markdown","source":["Python has soooo many cool ones, but here are:\n","\n","Data types we really like:\n","\n","*   List\n","*   Tuple\n","*   Dictionary\n","*   Set\n","*   String\n","*   Integer\n","*   Float\n","*   Boolean\n","\n"],"metadata":{"id":"iY87x2K56niB"}},{"cell_type":"markdown","source":["**Lists**!! Everyone's first. Data Structure.\n","\n","Lists in Python are similar to Arrays in your other languages, but much easier, because you do not have to give a fixed size, and can append & remove any elements.\n","\n","You can access elements using indices, starting from 0, all the way to length_of_list - 1\n","\n","**Brownie points ke liye: what data structure are they similar to (other than array), and a few lines on how the memory is allocated.**\n","\n","**Answer:** List's are similar to sets and tuples apart from arrays. For example the only difference between lists and tuples is the fact that tuples are immutable and lists are mutable. Now on the note of memory allocation, in lists a particular amount of memory is allocated when the list is created and as and when elements are added the allocated memory is increased on the basis of need, also there is dealocation of memory for as to when elements are deleted using the remove function. Whereas in tuples memory is allocated when it is made, as it is immutable no memory allocation or delocation is required or performed after once it is created."],"metadata":{"id":"MHPLlvUEzA2F"}},{"cell_type":"code","source":["# Lists, in Python, can have elements of multiple datatypes together.\n","# No need for a list to be only of Strings/Integers etc.\n","\n","this_list_is_valid = [\"Synapse\", 2024, True, [\"OOO list in list!\"], {123, \"anything in list tbh\"}]\n","\n","this_list_is_valid[1] = 2025\n","\n","this_list_is_valid[1]\n","# If you end a codeblock with a variable like this,\n","# Python will print the value for you. Neat!"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TScysV0VEJWr","executionInfo":{"status":"ok","timestamp":1723742904002,"user_tz":-330,"elapsed":484,"user":{"displayName":"Synapse Core","userId":"00506809504713929423"}},"outputId":"5425317f-0f4d-426f-8b41-f7c58b1cbd19"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["2025"]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["# Create a list of 7 elements (Thala for a reason?) too late on the trend\n","# and find + use as many Python methods on it as possible.\n","\n","# At least 10 different methods required.\n","bioData = [\"Tanish\", 2005, False, \"single\", {\"looking for she/her\", \"preference gujju\"}, \"Borivali\", \"Funny guy\"]\n","# and your many operations from here!\n","\n","bioData.append(\"Height: 173 cm\")\n","bioData.insert(1, \"Shah\")\n","bioData.extend([\"Student\", \"Computer Engineer\"]) # extend takes an list as a input and then concatenates it to another list\n","#bioData.reverse() This will reverse the whole list i.e., make it end to start\n","bioData.remove(False) # error arises when the input element does not exist\n","bioData.pop() # pop even returns the removed value\n","print(bioData.pop(-2))\n","advert = bioData[:5] # slicing [start : end : increment (default = 1)] even negative indexing can be used\n","advert2 = advert.copy()\n","print(advert)\n","print(advert2)\n","advert.clear() # this is used to clear or remove all the elements of a list (list is preserved)\n","print(advert)\n","print(bioData.count(2005)) # this returns the occurences of the given object\n","print(bioData.index(2005)) # also takes parameter for where to start search from and where to end it\n","\n","print(bioData)\n"],"metadata":{"id":"l-4VDcLBCoYe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1723930051887,"user_tz":-330,"elapsed":574,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"85415fa5-b2fd-4e2f-b9a2-ce332a33240a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Height: 173 cm\n","['Tanish', 'Shah', 2005, 'single', {'looking for she/her', 'preference gujju'}]\n","['Tanish', 'Shah', 2005, 'single', {'looking for she/her', 'preference gujju'}]\n","[]\n","1\n","2\n","['Tanish', 'Shah', 2005, 'single', {'looking for she/her', 'preference gujju'}, 'Borivali', 'Funny guy', 'Student']\n"]}]},{"cell_type":"markdown","source":["Tuples are exactly like lists, in every way except mutability.\n","\n","You access elements using indices, same as lists, but you cannot add/remove/modify them.\n","\n","They are useful in situations where you just need to declare something, usually critical, once. It could be used many times, and each element is accessible, but it cannot be changed."],"metadata":{"id":"ATJnxVvdDSX3"}},{"cell_type":"code","source":["a_random_tuple = (\"element1\", 2, \"Threeee\", False, \"OK\")\n","\n","print(a_random_tuple[1])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eotrA-hYDMfc","executionInfo":{"status":"ok","timestamp":1723742859064,"user_tz":-330,"elapsed":406,"user":{"displayName":"Synapse Core","userId":"00506809504713929423"}},"outputId":"94460d00-9f71-490b-ea88-1b8f0a36132b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2\n"]}]},{"cell_type":"code","source":["# Buuuut, Here you will get an error!\n","a_random_tuple[1] = 3"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":159},"id":"5ZOuKuJDFLSI","executionInfo":{"status":"error","timestamp":1723742923017,"user_tz":-330,"elapsed":406,"user":{"displayName":"Synapse Core","userId":"00506809504713929423"}},"outputId":"4456291e-1278-4cbb-815d-a25ccad42bc9"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"'tuple' object does not support item assignment","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-ef477904605b>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Buuuut, Here you will get an error!\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0ma_random_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"]}]},{"cell_type":"code","source":["# So what CAN you do with a Tuple?\n","# In python tuples have 3 operations:\n","# Accessing, Concatenation, Slicing\n","# You tell us! Use the tuple you have.\n","\n","tuple1 = (\"Tanish\", 19, 2005, False, 2005)\n","# Unpacking the values\n","a, b, c, d, e = tuple1\n","print(a)\n","print(b)\n","print(c)\n","print(d)\n","\n","# concantenation of tuples\n","tuple2 = (\"I\", \"Don't\", \"Know\")\n","tuple3 = tuple1 + tuple2\n","print(tuple3)\n","\n","# Slicing\n","tuple4 = tuple3[2:5]\n","print(tuple4)\n","print(tuple4[::-1]) # Can be used to reverse the tuple\n","\n","# Tuple Methods\n","print(tuple3.count(2005))\n","print(tuple3.index(2005))"],"metadata":{"id":"_8_0rMrUFb2G","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724093503062,"user_tz":-330,"elapsed":691,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"718c6424-56ac-4773-c46c-e6b59f7e471e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Tanish\n","19\n","2005\n","False\n","('Tanish', 19, 2005, False, 2005, 'I', \"Don't\", 'Know')\n","(2005, False, 2005)\n","(2005, False, 2005)\n","2\n","2\n"]}]},{"cell_type":"markdown","source":["**Dictionary** is interesting. You get to define your own indices!!\n"],"metadata":{"id":"CvVRJKiMNDxl"}},{"cell_type":"code","source":["# Here's the most basic dictionary:\n","my_dict = {'Car': 'Audi', 'Bike': 'Honda'}\n","print('Original Dictionary:', my_dict)\n","\n","# updating value of an existing key\n","my_dict['Bike'] = 'Ducati'\n","print('Updated Dictionary:', my_dict)\n","\n","# adding new value\n","my_dict['Plane'] = 'Boeing'\n","print('Updated Dictionary:', my_dict)\n","\n","# Now, add many elements of your choice to this dictionary\n","my_dict['Truck'] = 'MAN'\n","my_dict['Cycle'] = 'Hero'\n","my_dict['Hypercar'] = 'Koenigsegg'\n","\n","# Try removing element at index 2\n","print(my_dict.get(2))\n","#del my_dict[2]\n","\n","# Now, return the element with the key 'Bike'\n","print(my_dict[\"Bike\"])\n","\n","# And, use any 3 other methods on this dictionary.\n","print(my_dict.get(0))\n","print(my_dict.pop(\"Hypercar\"))\n","print(my_dict.update({\"Scooter\": \"Activa\"}))\n","\n","print(my_dict)"],"metadata":{"id":"cSts-7xJLRZ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724093705528,"user_tz":-330,"elapsed":586,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"260a172f-cf16-4b7e-8cb0-70c497eaa558"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Dictionary: {'Car': 'Audi', 'Bike': 'Honda'}\n","Updated Dictionary: {'Car': 'Audi', 'Bike': 'Ducati'}\n","Updated Dictionary: {'Car': 'Audi', 'Bike': 'Ducati', 'Plane': 'Boeing'}\n","None\n","Ducati\n","None\n","Koenigsegg\n","None\n","{'Car': 'Audi', 'Bike': 'Ducati', 'Plane': 'Boeing', 'Truck': 'MAN', 'Cycle': 'Hero', 'Scooter': 'Activa'}\n"]}]},{"cell_type":"markdown","source":["**Sets** are unordered and unindexed collections of items.\n","\n","Once a set is created, you cannot change its items, but you can remove items and add new items."],"metadata":{"id":"iR7gL8mCLScR"}},{"cell_type":"code","source":["my_set = {\"apple\", \"banana\", \"cherry\"}\n","print(my_set)\n","\n","# As in the sets you know from math, sets ignore duplicate values.\n","my_set = {\"apple\", \"banana\", \"cherry\", \"apple\"}\n","\n","print(my_set)"],"metadata":{"id":"IEUOUyk9Rm3k"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["**Write a use of Sets**\n","\n","**Answer:** It has unordered values so it can be used in bills at supermarkets where order isnt necessary also repetition is avoided."],"metadata":{"id":"FpTPXxffRBjs"}},{"cell_type":"markdown","source":["What do you get when you try to print different data types using print()?"],"metadata":{"id":"y_G8JVPwKO2N"}},{"cell_type":"code","source":["# Try printing and use type() on a:\n","# List\n","l1 = [\"Tanish\", \"Shah\", 1, 2, 3, 5]\n","print(type(l1))\n","\n","# Dictionary\n","d1 = {\"Name\": \"Tanish\", \"LName\": \"Shah\", \"Age\": 19}\n","print(type(d1))\n","\n","# Set\n","s1 = {\"Apple\", \"Oneplus\", \"Samsung\", \"Redmi\"}\n","print(type(s1))\n","\n","# and, once you are done with the Functions and classes section:\n","# Function\n","def AlphaQ():\n","  print(\"AlphaQ\")\n","\n","print(type(AlphaQ))\n","\n","# Class object\n","class Tanish:\n","  ...\n","\n","t1 = Tanish()\n","\n","print(type(t1))"],"metadata":{"id":"VLwrEttmOYfC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724346353610,"user_tz":-330,"elapsed":439,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"0811b2b2-1606-4779-86a5-5472fdb4768e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'list'>\n","<class 'dict'>\n","<class 'set'>\n","<class 'function'>\n","<class '__main__.Tanish'>\n"]}]},{"cell_type":"markdown","source":["##expressions"],"metadata":{"id":"5fs5xQwE9obV"}},{"cell_type":"markdown","source":["**Range** in Python generates a sequence of numbers starting at (inclusive), stopping at (not inclusive) and with a step that you ask.\n"],"metadata":{"id":"bfQc7A7t92lf"}},{"cell_type":"code","source":["print(list(range(-222, 3, 7)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-Y1bxh8PWU19","executionInfo":{"status":"ok","timestamp":1724010827638,"user_tz":-330,"elapsed":462,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"4b29713a-bbeb-4fb5-a6f8-734f91a3cbdc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-222, -215, -208, -201, -194, -187, -180, -173, -166, -159, -152, -145, -138, -131, -124, -117, -110, -103, -96, -89, -82, -75, -68, -61, -54, -47, -40, -33, -26, -19, -12, -5, 2]\n"]}]},{"cell_type":"code","source":["# Print a range of numbers starting with 2024, ending before 666, with step 17.\n","print(list(range(2024, 666, -17)))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KY8DyFYhW1_D","executionInfo":{"status":"ok","timestamp":1724094559803,"user_tz":-330,"elapsed":575,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"7eeb89cb-626e-4d8d-9d29-82d43c6cd68f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2024, 2007, 1990, 1973, 1956, 1939, 1922, 1905, 1888, 1871, 1854, 1837, 1820, 1803, 1786, 1769, 1752, 1735, 1718, 1701, 1684, 1667, 1650, 1633, 1616, 1599, 1582, 1565, 1548, 1531, 1514, 1497, 1480, 1463, 1446, 1429, 1412, 1395, 1378, 1361, 1344, 1327, 1310, 1293, 1276, 1259, 1242, 1225, 1208, 1191, 1174, 1157, 1140, 1123, 1106, 1089, 1072, 1055, 1038, 1021, 1004, 987, 970, 953, 936, 919, 902, 885, 868, 851, 834, 817, 800, 783, 766, 749, 732, 715, 698, 681]\n","664\n"]}]},{"cell_type":"code","source":["# You can use Python as your personal expression calculator!\n","a = 12\n","b = 5\n","\n","c = (a ** 2 + b ** 2) ** 0.5\n","\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2Mcw7NZ6fUf","executionInfo":{"status":"ok","timestamp":1724012643568,"user_tz":-330,"elapsed":483,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"0268bc97-c8e2-4797-c088-acd38467fd91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["13.0\n"]}]},{"cell_type":"code","source":["# Write expressions to get the quadratic roots of an equation,\n","# when given its coefficients.\n","\n","# 18.166247903553998 -48.166247903553995\n","# The two roots of 5x^2 + 6x -7 are 18.166247903553998 and -48.166247903553995\n","# The two roots of 5x^2 + 6x -7 are  18.166 and -48.166\n","\n","# a quadratic eqn is ax^2 + bx + c = 0\n","a = 5\n","b = 6\n","c = -7\n","\n","disc = ((b ** 2) - 4*a*c) ** 0.5\n","if disc > 0:\n","  root1 = (( -b + disc ) / 2*a)\n","  root2 = (( -b - disc ) / 2*a)\n","  print(f\"Roots of 5x^2 + 6x - 7 are %.3f and %.3f\" % (root1,root2))\n","elif disc == 0:\n","  root = (-b) / 2*a\n","  print(f\"Roots of quadratic eqn here is %.3f\" %root)\n","else:\n","  print(\"disc is less than zero roots are imaginary\")\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mZ7KzpQnWPfJ","executionInfo":{"status":"ok","timestamp":1724012607280,"user_tz":-330,"elapsed":547,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"09734562-4eb9-40b9-e8d6-6ff7ae828ba3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Roots of 5x^2 + 6x - 7 are 18.166 and -48.166\n"]}]},{"cell_type":"markdown","source":["**Modulus Operations**\n","\n","We know the basic modulus. Returns remainder.\n","\n","Python has the operator % for this."],"metadata":{"id":"5X2tlMyaWg0G"}},{"cell_type":"code","source":["print(-111 % 4)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ivdJ2egsYKyq","executionInfo":{"status":"ok","timestamp":1724349199787,"user_tz":-330,"elapsed":420,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"6b56883e-7cbd-4129-da30-09318d6cc189"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n"]}]},{"cell_type":"code","source":["print(-111%4.22)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b2W5eHFxOPZC","executionInfo":{"status":"ok","timestamp":1724349231325,"user_tz":-330,"elapsed":430,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"3dcdb2e0-823f-4f92-ab5e-7aa89b22646b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.9399999999999933\n"]}]},{"cell_type":"code","source":["# But it also supports negative dividend and or divisor!\n","# Experiment here! What is happening? Why?\n","\n","# Try float dividends!\n","print(-111%4.66)"],"metadata":{"id":"DXPSWcv1YYvL","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724349280237,"user_tz":-330,"elapsed":597,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"52066824-21b4-4dea-e0cb-9d0d2273372e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8400000000000034\n"]}]},{"cell_type":"markdown","source":["In python, Modulo calculates as divident = (quotient*divisor)+remainder\n","also the divisor and remainder always has the same sign."],"metadata":{"id":"IsdMMfpbMHlP"}},{"cell_type":"code","source":["# And, here's some popular division operands\n","print(1234 / 6) # Decimals!\n","\n","print(1234 // 6) # Only integer. Quotient."],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wzB7Ojs3Y1-G","executionInfo":{"status":"ok","timestamp":1723748076232,"user_tz":-330,"elapsed":438,"user":{"displayName":"Synapse Core","userId":"00506809504713929423"}},"outputId":"a8ed2a1e-cafd-4909-b31c-af66d36eacf3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["205.66666666666666\n","205\n"]}]},{"cell_type":"markdown","source":["##slicing & dicing"],"metadata":{"id":"sPlkbXCe7aS_"}},{"cell_type":"markdown","source":["Indexing in Strings and Lists will act the same.\n","\n","0 to length-1.\n","\n","Major difference? You cannot change a letter in the String but you can change a List element knowing its index.\n","\n","**Negative indices** in Python are something very fun though!"],"metadata":{"id":"Nwe8yxgsLiHE"}},{"cell_type":"code","source":["\"\"\"\n","This is what indices of Strings and Lists look like\n"," +---+---+---+---+---+---+\n"," | P | y | t | h | o | n |\n"," +---+---+---+---+---+---+\n"," 0   1   2   3   4   5   6\n","-6  -5  -4  -3  -2  -1\n","\"\"\"\n"],"metadata":{"id":"ILC37r8eCnXS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Some string slicing. Try and understand what is happening here,\n","# and do excuse my variable name.\n","x = \"Hello World\"\n","print(x)\n","print(x[1])\n","print(x[-1])\n","print(x[-3])\n","print(x[4:8])\n","print(x[:8])\n","print(x[7:])\n","print(x[:-2])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a4tFcVVpR9AQ","executionInfo":{"status":"ok","timestamp":1724094672029,"user_tz":-330,"elapsed":568,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"a120887b-4c81-4321-eff0-2e2a25acfa95"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello World\n","e\n","d\n","r\n","o Wo\n","Hello Wo\n","orld\n","Hello Wor\n"]}]},{"cell_type":"code","source":["x = \"Hello World\"\n","# Now, print the last 5 letters in the string x using negative indices.\n","print(x[-5:])\n","# How about the first 3?\n","print(x[:3])\n"],"metadata":{"id":"nGhy4dBoSSZ6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724094861842,"user_tz":-330,"elapsed":580,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"6e32b54d-7fb1-4fb0-ff2f-371c376ebae0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["World\n","Hel\n"]}]},{"cell_type":"markdown","source":["##indentation & conditions"],"metadata":{"id":"FCH_6knDAXAN"}},{"cell_type":"markdown","source":["Python has no curly braces. We convey blocks using indents, i.e. spaces.\n","\n","2 or 4 works. But be consistent!\n","\n","\n","---\n","\n","\n","\n","if else works as usual here, but instead of else if(), we get the cutesy elif!\n","\n","Aaaand, it gets more readable and english like. Not many brackets needed.\n","\n","You CAN put if condition in a bracket, but you don't HAVE to."],"metadata":{"id":"SONI_E95LsJQ"}},{"cell_type":"code","source":["attendancePercentage = 72\n","# In the code below the two print statements are one block.\n","# They are indented by 4-spaces to convey that\n","\n","if attendancePercentage < 75:\n","    print(\"Attendance requirement for Merit certificate not met\")\n","    print(\"Participation Certificate only\")\n","\n","elif 70 <= attendancePercentage < 80:\n","    print(\"Attendance sufficient!! Good job. You know people in college.\")\n","    print(\"You may pass.\")\n","\n","else:\n","    print(\"AMAZING ATTENDANCE. HOW DO YOU DO IT???\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H9q3EgEMGmeI","executionInfo":{"status":"ok","timestamp":1724095187932,"user_tz":-330,"elapsed":575,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"33cd8899-3ad5-417b-ec8a-512fa49cc432"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attendance requirement for Merit certificate not met\n","Participation Certificate only\n"]}]},{"cell_type":"code","source":["# Indents are SUPER important. Because if you clearly mess up, error!\n","\n","if attendancePercentage < 75:\n","    print(\"Attendance requirement for Merit certificate not met\")\n","print(\"Participation Certificate only\")\n","\n","elif 70 <= attendancePercentage < 80:\n","    print(\"Attendance sufficient!! Good job. You know people in college.\")\n","    print(\"You may pass.\")\n","\n","else:\n","    print(\"AMAZING ATTENDANCE. HOW DO YOU DO IT???\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"29a0XeAOHkYH","executionInfo":{"status":"ok","timestamp":1724095101734,"user_tz":-330,"elapsed":605,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"9dca886d-94b7-4f97-882d-e7ce5ef642e3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Attendance sufficient!! Good job. You know people in college.\n","You may pass.\n"]}]},{"cell_type":"markdown","source":["But you can also mess up worse. EASILY.\n","\n","It could be something you might not catch in time. Look at your code, and test it carefully before relying on it.\n"],"metadata":{"id":"l5wXh9PXKsbv"}},{"cell_type":"code","source":["# A Python special, you can:\n"," num = 19\n","17 <= num < 21"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SdUaSkenLyZo","executionInfo":{"status":"ok","timestamp":1724570394054,"user_tz":-330,"elapsed":468,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"daeb5100-596e-4e7e-d495-492cb4a24e44"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":19}]},{"cell_type":"markdown","source":["##loops"],"metadata":{"id":"L42g5YmP8LFF"}},{"cell_type":"markdown","source":["**for** loops in Python, especially operating on lists, MUST be treated differently compared to C++/Java/C.\n","\n","You say:\n","\n","for element in list_of_elements\n","\n","  \n","but please don't try:\n","\n"," for element in range(len(list_of_elements))."],"metadata":{"id":"iGh_Ukm9N0Ty"}},{"cell_type":"markdown","source":["**Write here why not!**\n","\n","**Answer:** len() function returns the length of the list so now the code becomes range(some int) so when it is for element in range(6) i.e., it will print 0 to 5. The error is that it does not have the list to iterate over we are just giving it the range of it."],"metadata":{"id":"7XItOlZoOsRw"}},{"cell_type":"code","source":["names = [\"Atharv\", \"Hirali\", \"Dhvani\", \"Divyam\", \"Taran\", \"Saumya\"]\n","\n","# Implement a for loop here to get odd elements of the list of names given.\n","for x in range(len(names)):\n","  if x%2 != 0:\n","    print(names[x])\n","\n","# Try using zip()\n","# zip is used to make a tuple from different iterators\n","l1 = [1, 2, 3, 4, 5, 6, 7]\n","l2 = [11, 22, 33, 44, 55, 66]\n","l3 = [111, 222, 333, 444, 555, 666]\n","print(list(zip(l1, l2, l3)))\n","\n","# enumerate()\n","print(list(enumerate(names, start=1)))"],"metadata":{"id":"BLiQe6NCOt2W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724099886136,"user_tz":-330,"elapsed":550,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f6e273b5-3613-4c31-c530-c6d59360e64c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hirali\n","Divyam\n","Saumya\n","[(1, 11, 111), (2, 22, 222), (3, 33, 333), (4, 44, 444), (5, 55, 555), (6, 66, 666)]\n","[(1, 'Atharv'), (2, 'Hirali'), (3, 'Dhvani'), (4, 'Divyam'), (5, 'Taran'), (6, 'Saumya')]\n"]}]},{"cell_type":"markdown","source":["Now **while** loops!"],"metadata":{"id":"Z1FrJ6IMN3sC"}},{"cell_type":"code","source":["# You'd already know while loops. Nothing new there.\n","# Write a while loop to print numbers from 0 to 4\n","i = 0\n","while(i<5):\n","  print(i)\n","  i += 1\n"],"metadata":{"id":"hLkyea8hLetw","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724099977393,"user_tz":-330,"elapsed":564,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"7abf3c14-7697-4910-d365-1d23bff4c70c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0\n","1\n","2\n","3\n","4\n"]}]},{"cell_type":"markdown","source":["Python has **break** and **continue** statements."],"metadata":{"id":"F11KgMjNMIBl"}},{"cell_type":"markdown","source":["##functions!"],"metadata":{"id":"tZGhcaotL-eu"}},{"cell_type":"markdown","source":["Python treats us all like adults. It has a lot of (sometimes too much) trust in us.\n","\n","We can redefine/overwrite many of its inbuilt functions!"],"metadata":{"id":"H7MwIqkYAjq9"}},{"cell_type":"code","source":["# Say sum().\n","\n","sample_list = [1, 2, 3, 4, 5]\n","\n","print(sum(sample_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"Q8X8_eJuNJWb","executionInfo":{"status":"error","timestamp":1724347599271,"user_tz":-330,"elapsed":452,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"cfe773cb-a52d-40be-ccd0-bd441ba90984"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"<lambda>() missing 1 required positional argument: 'n2'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-20-9e610ff9fb1c>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msample_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: <lambda>() missing 1 required positional argument: 'n2'"]}]},{"cell_type":"code","source":["# You can narrow down sum to:\n","\n","sum = lambda n1, n2: (n1 + n2)\n","\n","# So now:\n","print(sum(sample_list))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":182},"id":"1qliBdOtNSqk","executionInfo":{"status":"error","timestamp":1724347589664,"user_tz":-330,"elapsed":6,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f014c2e8-5acb-4a59-f6ba-dda7a58af789"},"execution_count":null,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"<lambda>() missing 1 required positional argument: 'n2'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-2ac84003e4a7>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# So now:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msample_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mTypeError\u001b[0m: <lambda>() missing 1 required positional argument: 'n2'"]}]},{"cell_type":"markdown","source":["So let's not abuse this? Name carefully."],"metadata":{"id":"9uJNiMNvNl5J"}},{"cell_type":"markdown","source":["Importing and using functions from Python modules is a necessity.\n","\n","(ML nahi toh nahi hoga)"],"metadata":{"id":"ty0TNObGgi6L"}},{"cell_type":"code","source":["#Calcute and print the product of a list, using reduce!\n","\n","from functools import reduce\n","def multiplication(x, y):\n","    return x * y\n","\n","try_on_list = [12, 33, 2, 4]\n","print(reduce(lambda x, y: x*y, try_on_list))\n"],"metadata":{"id":"kEhAaYPZSwK_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724100483080,"user_tz":-330,"elapsed":861,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"3f2720ed-a649-4136-d49c-a6c5156229b2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3168\n"]}]},{"cell_type":"code","source":["# First, write a lambda function taking the number n,\n","# that returns n to the power number of digits of n. (Try converting to string!)\n","len_power = lambda x: x ** len(str(x))\n","\n","import itertools\n","# Yeh kya karte hai? Just hover.\n","# Hover over them and Colab, our saviour, will tell you.\n","# And if you need more ref, I beg of you, OFFICIAL DOCS JAAO!!\n","\n","itertools_lagao = [1, 23, 2, 45, 4, 221, 11]\n","\n","# Use these to:\n","# Return a list of only the odd numbers\n","listOfOdd = list(filter(lambda x: x%2 != 0,itertools_lagao))\n","print(listOfOdd)\n","\n","# Apply your len_power function on each element and return a list of the answers\n","listOfPowers = list(map(lambda x: x ** len(str(x)),itertools_lagao))\n","print(listOfPowers)"],"metadata":{"id":"Zx6bXygATD8Q","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724347244702,"user_tz":-330,"elapsed":5,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"47246225-2db1-4b9d-d834-a82333bdd9c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 23, 45, 221, 11]\n","[1, 529, 2, 2025, 4, 10793861, 121]\n"]}]},{"cell_type":"markdown","source":["Now, write your own function!"],"metadata":{"id":"6t_8JAOpMoMn"}},{"cell_type":"code","source":["# Write a recursive function to check if a given string is a palindrome or not.\n","def isPalindrome(word):\n","  word.lower()\n","  return word == word[::-1]\n","\n","\n","print(isPalindrome(\"NAMAN\"))"],"metadata":{"id":"bRHFOXpvMm0f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724346866489,"user_tz":-330,"elapsed":477,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"5a265db7-cfdd-499e-eb0c-4f79a5671e96"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"markdown","source":["##classes & OOP"],"metadata":{"id":"_b_TqiPKAfYJ"}},{"cell_type":"code","source":["# Write a class in Python for a point (1D)\n","# Use functions like __str__ for it. Find out what they do ;)\n","\n","# Extend it for a Line. (2D)\n"],"metadata":{"id":"mLYTWWCkTkVD"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##write some code!"],"metadata":{"id":"L4G7bDwODLPC"}},{"cell_type":"markdown","source":["Best practices:\n","\n","Code must be for HUMANS. Make it:\n","\n","0. Correct\n","1. Readable: Easy to see if it is correct.\n","2. Changeable: Easy to change when what is correct changes.\n","3. Testable: See if the code is correct when what is correct changes.\n","\n","And please:\n","*    NEVER name variables a/b/c. No one will get what it is trying to do in an hour\n","*    Break things into functions whenever you think you need to. At this stage, more than you think. Debugging in a long main: NIGHTMARE.\n","*    Spacing and formatting: If you read code thatiswrittenlikethis, you will not WANT to read it. Whenever uncertain, follow https://peps.python.org/pep-0008/\n"],"metadata":{"id":"PqUah88kDQTy"}},{"cell_type":"markdown","source":["###Armstrong number"],"metadata":{"id":"519SaHFwDUUh"}},{"cell_type":"markdown","source":["Armstrong number is a number that is equal to the sum of the nth power of its digits. Here, n is the number of digits of the Armstrong number.\n","\n","For example 0, 1, 153, 370, 371 and 407 are the Armstrong numbers.\n","\n","Say, 153.\n","1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153!\n","Armstrong."],"metadata":{"id":"1zAdRLB6OJTt"}},{"cell_type":"code","source":["# Follow good practices and write code that accepts start and limit integers,\n","# and returns a list of Armstrong numbers between them (both inclusive).\n","\n","def armstrong(start, end):\n","  num = list()\n","  while(start < end):\n","    start += 1\n","\n","    while(n)\n"],"metadata":{"id":"iux8ioDuOKjS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Collatz sequence"],"metadata":{"id":"DngpGf7uDSK-"}},{"cell_type":"markdown","source":["Given a number, if it is even, the next number in collatz sequence is n/2. If it is odd, the next number is 3*n + 1.\n","\n","If you do this enough times, you will DEFINITELY end with a sequence of 4, 2, 1.\n","\n","(Search up how later, confusing but interesting)\n","\n","Return the collatz sequence of the input number, ending with the 4, 2, 1."],"metadata":{"id":"ZP0WxAIUOJ8p"}},{"cell_type":"code","source":["# Taking one input number, return its Collatz sequence in a list.\n","# Ending with the 4, 2, 1\n","seq = list()\n","userInput = int(input(\"Enter the Number: \"))\n","seq.append(userInput)\n","while (userInput != 1):\n","  if (userInput % 2 == 0):\n","    userInput = userInput // 2\n","    seq.append(userInput)\n","  else:\n","    userInput = (userInput * 3) + 1\n","    seq.append(userInput)\n","\n","print(seq)"],"metadata":{"id":"gciXSk8WMpf8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724348427482,"user_tz":-330,"elapsed":3621,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"a117c183-4596-45a3-a3a2-8884165faa12"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the Number: 45\n","[45, 136, 68, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]\n"]}]},{"cell_type":"markdown","source":["[Link ](https://drive.google.com/file/d/1ggFFKLb7D5_jO0FNeabZud4EJfmJlbkW/view?usp=sharing)to a good Python CheatSheet for reference!\n","\n","(It has easy, to very difficult stuff. Use whatever you need. And if you want the link to the *pirated* version, ping us 👀)"],"metadata":{"id":"FtB5FZSQMY7i"}},{"cell_type":"markdown","source":["# EDA"],"metadata":{"id":"FPqBv5yE7hPH"}},{"cell_type":"markdown","source":["Okay, now let's head to EDA!"],"metadata":{"id":"9JcS74Guv15H"}},{"cell_type":"markdown","source":["A nice place to start with would be the definition of EDA. Exploratory Data Analysis refers to the critical process of performing initial investigations on data so as to discover patterns, to spot anomalies, to test hypothesis and to check assumptions with the help of summary statistics and graphical representations. It is used by data scientists to analyze and investigate data sets and summarize their main characteristics, often employing data visualisation methods.\n","\n","Above each code cell, instructions and resources have been given. Go through the resources, then implement the code accordingly. Feel free to add extra cells to play around on your own as well :p"],"metadata":{"id":"ABxRZNKK1bD1"}},{"cell_type":"markdown","source":["##installing libraries and importing them"],"metadata":{"id":"JF_1_88JgaFY"}},{"cell_type":"markdown","source":["Some libraries like numpy and pandas are already pre installed on Colab. Some need to explicitly installed. A really cool data exploration library called ydata-profiling falls in the latter category. So use the appropriate pip command to install it."],"metadata":{"id":"peb67dMAkMg-"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ORep3J4JePys","executionInfo":{"status":"ok","timestamp":1724567941098,"user_tz":-330,"elapsed":9417,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1893b2e0-94fa-4ea5-882d-8d2d46d8b500"},"outputs":[{"output_type":"stream","name":"stdout","text":["  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m356.2/356.2 kB\u001b[0m \u001b[31m11.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m296.5/296.5 kB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m686.1/686.1 kB\u001b[0m \u001b[31m22.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m104.8/104.8 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m4.5/4.5 MB\u001b[0m \u001b[31m44.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Building wheel for htmlmin (setup.py) ... \u001b[?25l\u001b[?25hdone\n"]}],"source":["!pip install ydata-profiling -q"]},{"cell_type":"markdown","source":["Mount your Google Drive onto this notebook."],"metadata":{"id":"Nu6t8LW8kn3o"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KWOe8ZeWmCii","executionInfo":{"status":"ok","timestamp":1724567913789,"user_tz":-330,"elapsed":29255,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"e195f2df-8dc4-4f0f-8c9b-536ed13fe6e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"markdown","source":["Import basic libraries."],"metadata":{"id":"jVexnJcJ1iFa"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import ydata_profiling as pp"],"metadata":{"id":"6ZdBOLzXmV_r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##loading the dataset\n","\n","The dataset we wanna nitpick apart this week is one pertaining to crabs. Use this link to download it:\n","\n","https://drive.google.com/drive/folders/1DqJB3_B-8WyS9z-oEQJm1ayHJalb3xFv?usp=sharing\n","\n","Upload it to your Google Drive. Then read it into a variable using the pandas library."],"metadata":{"id":"jgsYRWHmhQAO"}},{"cell_type":"code","source":["# read dataset into a variable\n","df = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML Tasks/Week1/train.csv')\n","df"],"metadata":{"id":"m8Siqb9knB2s","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724567970386,"user_tz":-330,"elapsed":521,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"1e17e4ac-039a-4888-9284-0ad318194b55"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id Sex  Length  Diameter  Height     Weight  Shucked Weight  \\\n","0          0   I  1.5250    1.1750  0.3750  28.973189       12.728926   \n","1          1   I  1.1000    0.8250  0.2750  10.418441        4.521745   \n","2          2   M  1.3875    1.1125  0.3750  24.777463       11.339800   \n","3          3   F  1.7000    1.4125  0.5000  50.660556       20.354941   \n","4          4   I  1.2500    1.0125  0.3375  23.289114       11.977664   \n","...      ...  ..     ...       ...     ...        ...             ...   \n","74046  74046   F  1.6625    1.2625  0.4375  50.660556       20.680960   \n","74047  74047   I  1.0750    0.8625  0.2750  10.446791        4.323299   \n","74048  74048   F  1.4875    1.2000  0.4125  29.483480       12.303683   \n","74049  74049   I  1.2125    0.9625  0.3125  16.768729        8.972617   \n","74050  74050   I  0.9125    0.6750  0.2000   5.386405        2.055339   \n","\n","       Viscera Weight  Shell Weight  Age  \n","0            6.647958      8.348928    9  \n","1            2.324659      3.401940    8  \n","2            5.556502      6.662133    9  \n","3           10.991839     14.996885   11  \n","4            4.507570      5.953395    8  \n","...               ...           ...  ...  \n","74046       10.361742     12.332033   10  \n","74047        2.296310      3.543687    6  \n","74048        7.540967      8.079607   10  \n","74049        2.919999      4.280774    8  \n","74050        1.034757      1.700970    6  \n","\n","[74051 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-e044be2e-5cab-451f-930c-c47d12d810b5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Sex</th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>I</td>\n","      <td>1.5250</td>\n","      <td>1.1750</td>\n","      <td>0.3750</td>\n","      <td>28.973189</td>\n","      <td>12.728926</td>\n","      <td>6.647958</td>\n","      <td>8.348928</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>I</td>\n","      <td>1.1000</td>\n","      <td>0.8250</td>\n","      <td>0.2750</td>\n","      <td>10.418441</td>\n","      <td>4.521745</td>\n","      <td>2.324659</td>\n","      <td>3.401940</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>1.3875</td>\n","      <td>1.1125</td>\n","      <td>0.3750</td>\n","      <td>24.777463</td>\n","      <td>11.339800</td>\n","      <td>5.556502</td>\n","      <td>6.662133</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>F</td>\n","      <td>1.7000</td>\n","      <td>1.4125</td>\n","      <td>0.5000</td>\n","      <td>50.660556</td>\n","      <td>20.354941</td>\n","      <td>10.991839</td>\n","      <td>14.996885</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>I</td>\n","      <td>1.2500</td>\n","      <td>1.0125</td>\n","      <td>0.3375</td>\n","      <td>23.289114</td>\n","      <td>11.977664</td>\n","      <td>4.507570</td>\n","      <td>5.953395</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74046</th>\n","      <td>74046</td>\n","      <td>F</td>\n","      <td>1.6625</td>\n","      <td>1.2625</td>\n","      <td>0.4375</td>\n","      <td>50.660556</td>\n","      <td>20.680960</td>\n","      <td>10.361742</td>\n","      <td>12.332033</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74047</th>\n","      <td>74047</td>\n","      <td>I</td>\n","      <td>1.0750</td>\n","      <td>0.8625</td>\n","      <td>0.2750</td>\n","      <td>10.446791</td>\n","      <td>4.323299</td>\n","      <td>2.296310</td>\n","      <td>3.543687</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>74048</th>\n","      <td>74048</td>\n","      <td>F</td>\n","      <td>1.4875</td>\n","      <td>1.2000</td>\n","      <td>0.4125</td>\n","      <td>29.483480</td>\n","      <td>12.303683</td>\n","      <td>7.540967</td>\n","      <td>8.079607</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74049</th>\n","      <td>74049</td>\n","      <td>I</td>\n","      <td>1.2125</td>\n","      <td>0.9625</td>\n","      <td>0.3125</td>\n","      <td>16.768729</td>\n","      <td>8.972617</td>\n","      <td>2.919999</td>\n","      <td>4.280774</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>74050</th>\n","      <td>74050</td>\n","      <td>I</td>\n","      <td>0.9125</td>\n","      <td>0.6750</td>\n","      <td>0.2000</td>\n","      <td>5.386405</td>\n","      <td>2.055339</td>\n","      <td>1.034757</td>\n","      <td>1.700970</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74051 rows × 10 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e044be2e-5cab-451f-930c-c47d12d810b5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e044be2e-5cab-451f-930c-c47d12d810b5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e044be2e-5cab-451f-930c-c47d12d810b5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3fe26b5-2712-4047-bf7e-957e221256cf\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3fe26b5-2712-4047-bf7e-957e221256cf')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3fe26b5-2712-4047-bf7e-957e221256cf button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a75df235-3798-4f81-8d9d-0d5db8513203\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a75df235-3798-4f81-8d9d-0d5db8513203 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 74051,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21376,\n        \"min\": 0,\n        \"max\": 74050,\n        \"num_unique_values\": 74051,\n        \"samples\": [\n          27233,\n          55493,\n          49980\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"I\",\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28775712570464246,\n        \"min\": 0.1875,\n        \"max\": 2.0128145,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.55,\n          1.0875,\n          0.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23739627818899556,\n        \"min\": 0.1375,\n        \"max\": 1.6125,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1.2,\n          0.55,\n          1.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09203396050696379,\n        \"min\": 0.0,\n        \"max\": 2.825,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.41,\n          0.775,\n          0.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.648153002843257,\n        \"min\": 0.056699,\n        \"max\": 80.10151225,\n        \"num_unique_values\": 3096,\n        \"samples\": [\n          5.99591925,\n          32.6302745,\n          13.48018725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.618025350822559,\n        \"min\": 0.0283495,\n        \"max\": 42.184056,\n        \"num_unique_values\": 1766,\n        \"samples\": [\n          26.7902775,\n          12.60135275,\n          17.05222425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7927287058162005,\n        \"min\": 0.04252425,\n        \"max\": 21.54562,\n        \"num_unique_values\": 967,\n        \"samples\": [\n          4.12485225,\n          2.948348,\n          3.0900955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5843721003973585,\n        \"min\": 0.04252425,\n        \"max\": 28.4912475,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          9.808927,\n          12.14776075,\n          8.107957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          13,\n          29,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["View the first 5 rows of this DataFrame to see if it has been stored correctly."],"metadata":{"id":"uAr01C4mlJZU"}},{"cell_type":"code","source":["# write code here\n","df.head()"],"metadata":{"id":"5gNBlroulIw8","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1724268885614,"user_tz":-330,"elapsed":13,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f3e6881a-c4ca-4d6d-9a08-3e39d57d2fd0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id Sex  Length  Diameter  Height     Weight  Shucked Weight  \\\n","0   0   I  1.5250    1.1750  0.3750  28.973189       12.728926   \n","1   1   I  1.1000    0.8250  0.2750  10.418441        4.521745   \n","2   2   M  1.3875    1.1125  0.3750  24.777463       11.339800   \n","3   3   F  1.7000    1.4125  0.5000  50.660556       20.354941   \n","4   4   I  1.2500    1.0125  0.3375  23.289114       11.977664   \n","\n","   Viscera Weight  Shell Weight  Age  \n","0        6.647958      8.348928    9  \n","1        2.324659      3.401940    8  \n","2        5.556502      6.662133    9  \n","3       10.991839     14.996885   11  \n","4        4.507570      5.953395    8  "],"text/html":["\n","  <div id=\"df-bb500c60-247a-4d49-b7fc-56b1c716d522\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Sex</th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>I</td>\n","      <td>1.5250</td>\n","      <td>1.1750</td>\n","      <td>0.3750</td>\n","      <td>28.973189</td>\n","      <td>12.728926</td>\n","      <td>6.647958</td>\n","      <td>8.348928</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>I</td>\n","      <td>1.1000</td>\n","      <td>0.8250</td>\n","      <td>0.2750</td>\n","      <td>10.418441</td>\n","      <td>4.521745</td>\n","      <td>2.324659</td>\n","      <td>3.401940</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>1.3875</td>\n","      <td>1.1125</td>\n","      <td>0.3750</td>\n","      <td>24.777463</td>\n","      <td>11.339800</td>\n","      <td>5.556502</td>\n","      <td>6.662133</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>F</td>\n","      <td>1.7000</td>\n","      <td>1.4125</td>\n","      <td>0.5000</td>\n","      <td>50.660556</td>\n","      <td>20.354941</td>\n","      <td>10.991839</td>\n","      <td>14.996885</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>I</td>\n","      <td>1.2500</td>\n","      <td>1.0125</td>\n","      <td>0.3375</td>\n","      <td>23.289114</td>\n","      <td>11.977664</td>\n","      <td>4.507570</td>\n","      <td>5.953395</td>\n","      <td>8</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bb500c60-247a-4d49-b7fc-56b1c716d522')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-bb500c60-247a-4d49-b7fc-56b1c716d522 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-bb500c60-247a-4d49-b7fc-56b1c716d522');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-81517ac3-e8d6-4b67-a943-dae30e6d9ddd\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-81517ac3-e8d6-4b67-a943-dae30e6d9ddd')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-81517ac3-e8d6-4b67-a943-dae30e6d9ddd button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 74051,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21376,\n        \"min\": 0,\n        \"max\": 74050,\n        \"num_unique_values\": 74051,\n        \"samples\": [\n          27233,\n          55493,\n          49980\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"I\",\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28775712570464246,\n        \"min\": 0.1875,\n        \"max\": 2.0128145,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.55,\n          1.0875,\n          0.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23739627818899556,\n        \"min\": 0.1375,\n        \"max\": 1.6125,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1.2,\n          0.55,\n          1.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09203396050696379,\n        \"min\": 0.0,\n        \"max\": 2.825,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.41,\n          0.775,\n          0.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.648153002843257,\n        \"min\": 0.056699,\n        \"max\": 80.10151225,\n        \"num_unique_values\": 3096,\n        \"samples\": [\n          5.99591925,\n          32.6302745,\n          13.48018725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.618025350822559,\n        \"min\": 0.0283495,\n        \"max\": 42.184056,\n        \"num_unique_values\": 1766,\n        \"samples\": [\n          26.7902775,\n          12.60135275,\n          17.05222425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7927287058162005,\n        \"min\": 0.04252425,\n        \"max\": 21.54562,\n        \"num_unique_values\": 967,\n        \"samples\": [\n          4.12485225,\n          2.948348,\n          3.0900955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5843721003973585,\n        \"min\": 0.04252425,\n        \"max\": 28.4912475,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          9.808927,\n          12.14776075,\n          8.107957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          13,\n          29,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["Right, so now you have your entire DataFrame residing in a variable. But again, what even is a DataFrame? Just speed through the below article.\n","\n","https://www.databricks.com/glossary/what-are-dataframes\n","\n"],"metadata":{"id":"_YMrWRL3idix"}},{"cell_type":"markdown","source":["##basic EDA\n","\n","Here, we aim to get a basic overview of the dataset.\n"],"metadata":{"id":"n35a9N5Sld_M"}},{"cell_type":"markdown","source":["List the columns in this dataset."],"metadata":{"id":"VnyHtyu7lyd7"}},{"cell_type":"code","source":["# write code here\n","df.columns"],"metadata":{"id":"RF0YI22Dnh7N","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268886851,"user_tz":-330,"elapsed":3,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f0e8561a-90d1-4a6b-8d11-9e6860aa8fcb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['id', 'Sex', 'Length', 'Diameter', 'Height', 'Weight', 'Shucked Weight',\n","       'Viscera Weight', 'Shell Weight', 'Age'],\n","      dtype='object')"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["You may have noticed that the 'id' column is just indexing the rows in the DataFrame. But we don't really need that, as pandas very neatly handles that for us. So drop that column."],"metadata":{"id":"sSDgAbBJpyo-"}},{"cell_type":"code","source":["# drop the column, then view its first 5 values\n","# df = df.drop(colummns = ['id], axis = 1)\n","df = df.drop('id', axis=1) # axis = 0 / 1 0 --> rows, 1 --> column\n","df"],"metadata":{"id":"GRINhc60pvll","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724273936347,"user_tz":-330,"elapsed":452,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"978ebed0-98ac-4edc-ae8a-42320742acb1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Sex  Length  Diameter  Height     Weight  Shucked Weight  \\\n","0       I  1.5250    1.1750  0.3750  28.973189       12.728926   \n","1       I  1.1000    0.8250  0.2750  10.418441        4.521745   \n","2       M  1.3875    1.1125  0.3750  24.777463       11.339800   \n","3       F  1.7000    1.4125  0.5000  50.660556       20.354941   \n","4       I  1.2500    1.0125  0.3375  23.289114       11.977664   \n","...    ..     ...       ...     ...        ...             ...   \n","74046   F  1.6625    1.2625  0.4375  50.660556       20.680960   \n","74047   I  1.0750    0.8625  0.2750  10.446791        4.323299   \n","74048   F  1.4875    1.2000  0.4125  29.483480       12.303683   \n","74049   I  1.2125    0.9625  0.3125  16.768729        8.972617   \n","74050   I  0.9125    0.6750  0.2000   5.386405        2.055339   \n","\n","       Viscera Weight  Shell Weight  Age  \n","0            6.647958      8.348928    9  \n","1            2.324659      3.401940    8  \n","2            5.556502      6.662133    9  \n","3           10.991839     14.996885   11  \n","4            4.507570      5.953395    8  \n","...               ...           ...  ...  \n","74046       10.361742     12.332033   10  \n","74047        2.296310      3.543687    6  \n","74048        7.540967      8.079607   10  \n","74049        2.919999      4.280774    8  \n","74050        1.034757      1.700970    6  \n","\n","[74051 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-f5372afb-f9f6-45aa-8708-bc71804a3ad2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>I</td>\n","      <td>1.5250</td>\n","      <td>1.1750</td>\n","      <td>0.3750</td>\n","      <td>28.973189</td>\n","      <td>12.728926</td>\n","      <td>6.647958</td>\n","      <td>8.348928</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>I</td>\n","      <td>1.1000</td>\n","      <td>0.8250</td>\n","      <td>0.2750</td>\n","      <td>10.418441</td>\n","      <td>4.521745</td>\n","      <td>2.324659</td>\n","      <td>3.401940</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M</td>\n","      <td>1.3875</td>\n","      <td>1.1125</td>\n","      <td>0.3750</td>\n","      <td>24.777463</td>\n","      <td>11.339800</td>\n","      <td>5.556502</td>\n","      <td>6.662133</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>F</td>\n","      <td>1.7000</td>\n","      <td>1.4125</td>\n","      <td>0.5000</td>\n","      <td>50.660556</td>\n","      <td>20.354941</td>\n","      <td>10.991839</td>\n","      <td>14.996885</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>I</td>\n","      <td>1.2500</td>\n","      <td>1.0125</td>\n","      <td>0.3375</td>\n","      <td>23.289114</td>\n","      <td>11.977664</td>\n","      <td>4.507570</td>\n","      <td>5.953395</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74046</th>\n","      <td>F</td>\n","      <td>1.6625</td>\n","      <td>1.2625</td>\n","      <td>0.4375</td>\n","      <td>50.660556</td>\n","      <td>20.680960</td>\n","      <td>10.361742</td>\n","      <td>12.332033</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74047</th>\n","      <td>I</td>\n","      <td>1.0750</td>\n","      <td>0.8625</td>\n","      <td>0.2750</td>\n","      <td>10.446791</td>\n","      <td>4.323299</td>\n","      <td>2.296310</td>\n","      <td>3.543687</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>74048</th>\n","      <td>F</td>\n","      <td>1.4875</td>\n","      <td>1.2000</td>\n","      <td>0.4125</td>\n","      <td>29.483480</td>\n","      <td>12.303683</td>\n","      <td>7.540967</td>\n","      <td>8.079607</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74049</th>\n","      <td>I</td>\n","      <td>1.2125</td>\n","      <td>0.9625</td>\n","      <td>0.3125</td>\n","      <td>16.768729</td>\n","      <td>8.972617</td>\n","      <td>2.919999</td>\n","      <td>4.280774</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>74050</th>\n","      <td>I</td>\n","      <td>0.9125</td>\n","      <td>0.6750</td>\n","      <td>0.2000</td>\n","      <td>5.386405</td>\n","      <td>2.055339</td>\n","      <td>1.034757</td>\n","      <td>1.700970</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74051 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5372afb-f9f6-45aa-8708-bc71804a3ad2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f5372afb-f9f6-45aa-8708-bc71804a3ad2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f5372afb-f9f6-45aa-8708-bc71804a3ad2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-27c85765-5c03-4b92-ba2c-dce4ac66de15\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-27c85765-5c03-4b92-ba2c-dce4ac66de15')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-27c85765-5c03-4b92-ba2c-dce4ac66de15 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_52a73b38-7d2b-4d0d-bc9a-2bb27cfa1fcc\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_52a73b38-7d2b-4d0d-bc9a-2bb27cfa1fcc button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 74051,\n  \"fields\": [\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"I\",\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28775712570464246,\n        \"min\": 0.1875,\n        \"max\": 2.0128145,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.55,\n          1.0875,\n          0.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23739627818899556,\n        \"min\": 0.1375,\n        \"max\": 1.6125,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1.2,\n          0.55,\n          1.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09203396050696379,\n        \"min\": 0.0,\n        \"max\": 2.825,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.41,\n          0.775,\n          0.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.648153002843257,\n        \"min\": 0.056699,\n        \"max\": 80.10151225,\n        \"num_unique_values\": 3096,\n        \"samples\": [\n          5.99591925,\n          32.6302745,\n          13.48018725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.618025350822559,\n        \"min\": 0.0283495,\n        \"max\": 42.184056,\n        \"num_unique_values\": 1766,\n        \"samples\": [\n          26.7902775,\n          12.60135275,\n          17.05222425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7927287058162005,\n        \"min\": 0.04252425,\n        \"max\": 21.54562,\n        \"num_unique_values\": 967,\n        \"samples\": [\n          4.12485225,\n          2.948348,\n          3.0900955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5843721003973585,\n        \"min\": 0.04252425,\n        \"max\": 28.4912475,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          9.808927,\n          12.14776075,\n          8.107957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          13,\n          29,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":69}]},{"cell_type":"markdown","source":["Display the the number of rows and columns in this dataset."],"metadata":{"id":"C-pajIWIl55Z"}},{"cell_type":"code","source":["# write code here\n","df.shape"],"metadata":{"id":"8N1d8_kamA1D","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268888943,"user_tz":-330,"elapsed":6,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"4d3be139-93f3-457a-db31-8ec79bf479d0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(74051, 9)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["Use the info() function to get, well, info about it."],"metadata":{"id":"aQcIiVrcmFNX"}},{"cell_type":"code","source":["# write code here\n","df.info()"],"metadata":{"id":"bJS3tII7mmBO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268889817,"user_tz":-330,"elapsed":5,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"471307e8-7491-4da2-deba-e4a7aa3dc39f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 74051 entries, 0 to 74050\n","Data columns (total 9 columns):\n"," #   Column          Non-Null Count  Dtype  \n","---  ------          --------------  -----  \n"," 0   Sex             74051 non-null  object \n"," 1   Length          74051 non-null  float64\n"," 2   Diameter        74051 non-null  float64\n"," 3   Height          74051 non-null  float64\n"," 4   Weight          74051 non-null  float64\n"," 5   Shucked Weight  74051 non-null  float64\n"," 6   Viscera Weight  74051 non-null  float64\n"," 7   Shell Weight    74051 non-null  float64\n"," 8   Age             74051 non-null  int64  \n","dtypes: float64(7), int64(1), object(1)\n","memory usage: 5.1+ MB\n"]}]},{"cell_type":"markdown","source":["No null values. How lucky."],"metadata":{"id":"SaOk9AOzzs5c"}},{"cell_type":"markdown","source":["What are the statistics of this data? Use describe() function to view them. Google what each of those row headers mean."],"metadata":{"id":"0WdsqJULmvjp"}},{"cell_type":"code","source":["# write code here\n","df.describe()"],"metadata":{"id":"vHDY9fnAnArD","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1724268890508,"user_tz":-330,"elapsed":13,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"a8f3fcf2-2f9e-4ae2-c469-9343afdab93f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             Length      Diameter        Height        Weight  Shucked Weight  \\\n","count  74051.000000  74051.000000  74051.000000  74051.000000    74051.000000   \n","mean       1.317460      1.024496      0.348089     23.385217       10.104270   \n","std        0.287757      0.237396      0.092034     12.648153        5.618025   \n","min        0.187500      0.137500      0.000000      0.056699        0.028349   \n","25%        1.150000      0.887500      0.300000     13.437663        5.712424   \n","50%        1.375000      1.075000      0.362500     23.799405        9.908150   \n","75%        1.537500      1.200000      0.412500     32.162508       14.033003   \n","max        2.012815      1.612500      2.825000     80.101512       42.184056   \n","\n","       Viscera Weight  Shell Weight           Age  \n","count    74051.000000  74051.000000  74051.000000  \n","mean         5.058386      6.723870      9.967806  \n","std          2.792729      3.584372      3.175189  \n","min          0.042524      0.042524      1.000000  \n","25%          2.863300      3.968930      8.000000  \n","50%          4.989512      6.931453     10.000000  \n","75%          6.988152      9.071840     11.000000  \n","max         21.545620     28.491248     29.000000  "],"text/html":["\n","  <div id=\"df-3895ba62-7111-4788-bdc6-732484bb37c6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","      <td>74051.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>1.317460</td>\n","      <td>1.024496</td>\n","      <td>0.348089</td>\n","      <td>23.385217</td>\n","      <td>10.104270</td>\n","      <td>5.058386</td>\n","      <td>6.723870</td>\n","      <td>9.967806</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>0.287757</td>\n","      <td>0.237396</td>\n","      <td>0.092034</td>\n","      <td>12.648153</td>\n","      <td>5.618025</td>\n","      <td>2.792729</td>\n","      <td>3.584372</td>\n","      <td>3.175189</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>0.187500</td>\n","      <td>0.137500</td>\n","      <td>0.000000</td>\n","      <td>0.056699</td>\n","      <td>0.028349</td>\n","      <td>0.042524</td>\n","      <td>0.042524</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>1.150000</td>\n","      <td>0.887500</td>\n","      <td>0.300000</td>\n","      <td>13.437663</td>\n","      <td>5.712424</td>\n","      <td>2.863300</td>\n","      <td>3.968930</td>\n","      <td>8.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>1.375000</td>\n","      <td>1.075000</td>\n","      <td>0.362500</td>\n","      <td>23.799405</td>\n","      <td>9.908150</td>\n","      <td>4.989512</td>\n","      <td>6.931453</td>\n","      <td>10.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>1.537500</td>\n","      <td>1.200000</td>\n","      <td>0.412500</td>\n","      <td>32.162508</td>\n","      <td>14.033003</td>\n","      <td>6.988152</td>\n","      <td>9.071840</td>\n","      <td>11.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2.012815</td>\n","      <td>1.612500</td>\n","      <td>2.825000</td>\n","      <td>80.101512</td>\n","      <td>42.184056</td>\n","      <td>21.545620</td>\n","      <td>28.491248</td>\n","      <td>29.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3895ba62-7111-4788-bdc6-732484bb37c6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-3895ba62-7111-4788-bdc6-732484bb37c6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-3895ba62-7111-4788-bdc6-732484bb37c6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-4e57eea7-7962-434c-ae34-fa693281afe2\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e57eea7-7962-434c-ae34-fa693281afe2')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-4e57eea7-7962-434c-ae34-fa693281afe2 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26180.584738412745,\n        \"min\": 0.1875,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.3174599958339523,\n          1.375,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26180.670277451663,\n        \"min\": 0.1375,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0244960414781705,\n          1.075,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26180.762933339334,\n        \"min\": 0.0,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.34808948076325774,\n          0.3625,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26171.61923092148,\n        \"min\": 0.056699,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          23.385216972918357,\n          23.79940525,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26176.56137492904,\n        \"min\": 0.0283495,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          10.104269739832008,\n          9.90815025,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26178.746454844677,\n        \"min\": 0.04252425,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          5.058385996246506,\n          4.989512,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26178.012982904504,\n        \"min\": 0.04252425,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          6.723870114695852,\n          6.93145275,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26177.339700325425,\n        \"min\": 1.0,\n        \"max\": 74051.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          9.967805971560141,\n          10.0,\n          74051.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["Write a function to print all the unique values in the columns of Sex and Age."],"metadata":{"id":"kZ_ebv5bnhJS"}},{"cell_type":"code","source":["# write code here\n","print(df.Sex.unique())\n","print(df.Age.unique())"],"metadata":{"id":"BnE-2G3BnFGh","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268890508,"user_tz":-330,"elapsed":10,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"4410f0c3-e00b-4261-a89c-a4e384e2e2c1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['I' 'M' 'F']\n","[ 9  8 11 10 12  7  5 14  6 13 16  4 18 15 17  3 19 23 21 20 26 22 27 24\n"," 25 29  2  1]\n"]}]},{"cell_type":"markdown","source":["List out the number of crabs belonging to each gender."],"metadata":{"id":"bHbMaSPKyEFy"}},{"cell_type":"code","source":["# write code here\n","i = 0\n","f = 0\n","m = 0\n","for element in df['Sex']:\n","  if element == 'I':\n","    i += 1\n","  elif element == 'F':\n","    f += 1\n","  else:\n","    m += 1\n","\n","print(\"Male: %d\" %m)\n","print(\"Female: %d\" %f)\n","print(\"I: %d\" %i)\n","\n","df.groupby('Sex').size()"],"metadata":{"id":"71mfDcbbyTiT","colab":{"base_uri":"https://localhost:8080/","height":264},"executionInfo":{"status":"ok","timestamp":1724567994956,"user_tz":-330,"elapsed":460,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"2d538f70-ab0b-4457-a910-cc81105c4938"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Male: 27084\n","Female: 23010\n","I: 23957\n"]},{"output_type":"execute_result","data":{"text/plain":["Sex\n","F    23010\n","I    23957\n","M    27084\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>F</th>\n","      <td>23010</td>\n","    </tr>\n","    <tr>\n","      <th>I</th>\n","      <td>23957</td>\n","    </tr>\n","    <tr>\n","      <th>M</th>\n","      <td>27084</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["If your output is correct, you'll find the dataset is decently well-balanced, although it is a bit skewed towards male crabs."],"metadata":{"id":"FdxzyNmp_Ie6"}},{"cell_type":"markdown","source":["##pandas profiling"],"metadata":{"id":"X3080G2QhD_Y"}},{"cell_type":"markdown","source":["Doing all the above for each dataset in separate cells gets boring fast. Enter ydata_profiling. You just have to feed a DataFrame to it, and it takes care of basic EDA (and then some more) for you. Resource:\n","\n","https://ydata-profiling.ydata.ai/docs/master/pages/getting_started/quickstart.html\n","\n","Run a Profile Report on our dataframe and just go through it."],"metadata":{"id":"d_LdQ-m8hGmH"}},{"cell_type":"code","source":["# write code here\n","from ydata_profiling import ProfileReport\n","\n","profile = ProfileReport(df, title=\"Profiling Report\")\n","profile"],"metadata":{"id":"zF-gFEzOh7Bz","colab":{"base_uri":"https://localhost:8080/","height":917,"referenced_widgets":["9e2a110c09ef4af09a017ac01b8fd0ea","c34bad554d2a401481010cafa1d8affc","35ab2d94f8ed4ee386615aa1aac1ede6","b9bbd78ac08f468d863d2c950011cc7a","82ead034fe8346239205e036adfd55fe","d539941715c54f7691c292fa57520cec","593027644a164a2bab6a5131dd2642ea","824e3db70cbe4ad197ad7ef99e4d921d","98c696ea9f2642f3a70aaced6471c501","b42118b8591e48739f9610282de1f685","1f3b68f0b6fe414c9c2768394aa0eb34","3f60d11296844de0a88b75c727a13f81","380cce85e0a34f1f9e576931d09cbbd0","881a34d5d1d540009a5a50fb5121514e","d853aaf2c2f94f33ad9ce78a6e472e59","cde8ab44c75c469e9501b71f99e010e9","0e5423aeb1ee4eb3b713dcf2eb0cea4b","349da5ed5bde4a74baffd928a9c9daf5","5f742282a9274804ad2d0e1d3682b7ed","c118a0e6568947b0a675afa513c0225b","283599cf5b49483e90d4f7c3873c56d0","6fd7deb0b4b2420a9778f0ea2549b75b","c2540c5b0fbb4de69c4d36d8371f6198","47c6cd1655bd484d8e144655c0df57b6","fd5341b599c241aeb53e6fe574c9f42a","fef31242fb6f41be9c26dc0b20c222a2","44e11a68618b4a9c9df220fc80969d99","d63c1c7711e84190bd4a2fe927707172","38de6f75e9fd40b0a112d06ad3c12f34","92646c89e7dd4e10a69b25e4a69a9f5e","df82d5afff464a00b1eafd1d9fe74086","7eed5c4c6fc0450e965756c8e1714834","d0bc69ddead24d68a1b9f75b26e869bf"],"output_embedded_package_id":"1k_94IzrgNHhAP3mMB1jFuF2muCav1QGq"},"executionInfo":{"status":"ok","timestamp":1724268929015,"user_tz":-330,"elapsed":36546,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"fa182855-bcfc-45de-f993-3551f0c3edfe"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":"Output hidden; open in https://colab.research.google.com to view."},"metadata":{}}]},{"cell_type":"markdown","source":["A lot of what we did above manually gets handled automatically. Pretty cool, innit?\n","\n","Also, if you genuinely went through the report, you'll find that some crabs have height as zero. That doesn't make much sense.\n","\n","Drop all these apparently two dimensional crabs from the dataset. Get rid of all rows where height is zero."],"metadata":{"id":"4Ubhzt3gh-QR"}},{"cell_type":"code","source":["# write code here\n","df = df.loc[df['Height'] != 0]\n","df.shape"],"metadata":{"id":"Xnvy65RwR4NR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268929016,"user_tz":-330,"elapsed":83,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"0a684623-d69e-4362-a1df-619c0d57441a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(74027, 9)"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["If done correctly, your DataFrame now will have shape (74027, 9). Check that below."],"metadata":{"id":"PcrFNZtiToGi"}},{"cell_type":"code","source":["# write code here\n","df.shape"],"metadata":{"id":"ZhgQkDFkTntk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724268929016,"user_tz":-330,"elapsed":76,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"c5e06ae5-cff6-473a-bec3-18ed1fd41fe7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(74027, 9)"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["##plotting some stuff out\n","\n","To explore data properly, data visualisation techniques are employed. What that essentially means that we're gonna plot some graphs and glean meaningful insights from them. We use the matplotlib library for this, and seaborn to make it look real pretty, for no one likes an ugly graph.\n","\n","\n"],"metadata":{"id":"00PG10C6q6ah"}},{"cell_type":"markdown","source":["##bar charts"],"metadata":{"id":"-Y_99EUk-TCL"}},{"cell_type":"markdown","source":["Plot a bar graph to view the average age of each sex. For help, refer:\n","\n","https://www.analyticsvidhya.com/blog/2021/08/understanding-bar-plots-in-python-beginners-guide-to-data-visualization/"],"metadata":{"id":"47WGjw27ro8b"}},{"cell_type":"code","source":["# write the logic here before you actually plot the graph\n","# Here we print the Sex on the x axis and then print the age on y axis, it will automatically take the average of M, F and I and then print it accodingly\n"],"metadata":{"id":"pWCec0zNsley"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["x axis will contain Sex, and y axis has the average age."],"metadata":{"id":"Y3ZreZlGzH9l"}},{"cell_type":"code","source":["# plot the graph here\n","sns.barplot(x='Sex', y='Age', data = df)\n","plt.ylabel('Average Age')"],"metadata":{"id":"SLlvELk5v9uY","colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"status":"ok","timestamp":1724269239583,"user_tz":-330,"elapsed":1202,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f6a7ec64-cba5-4172-9736-1b1824f73f21"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0, 0.5, 'Average Age')"]},"metadata":{},"execution_count":22},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["As with humans, it seems that crabs have their female sex having longer lives on average. Still, all genders have a pretty short lifespan. Shame.  "],"metadata":{"id":"NCeJkyT1xrWG"}},{"cell_type":"markdown","source":["Anyways, the above bar graph of Average Age and Sex is not the most comprehensive way to analyse such data."],"metadata":{"id":"139j-T9Sybfr"}},{"cell_type":"markdown","source":["##KDE plots"],"metadata":{"id":"34EXUQwy_RfA"}},{"cell_type":"markdown","source":["Now, we'll graph some of the other numeric data with age to try and get more information about it all relates. Display KDE plots of Age, Length, and Weight. For resources about a KDE plot:\n","\n","https://www.youtube.com/watch?v=DCgPRaIDYXA\n","\n","https://datagy.io/seaborn-kdeplot/\n","\n","Don't make three separate cells for each of these plots. All three plots should be visible in a single row."],"metadata":{"id":"_-ILWXcfyzRQ"}},{"cell_type":"code","source":["fig, ax = plt.subplots(figsize = (17, 18))\n","plt.subplot(2, 3, 1)\n","sns.kdeplot(df.Age,shade=True, color='Blue')\n","plt.subplot(2, 3, 2)\n","sns.kdeplot(df.Length,shade=True, color='Orange')\n","plt.subplot(2, 3, 3)\n","sns.kdeplot(df.Weight,shade=True, color='Green')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"VyvY1vTddyKe","executionInfo":{"status":"ok","timestamp":1724271098922,"user_tz":-330,"elapsed":3469,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"f5266208-4389-4f49-b74f-8974bc07a695"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-44-6c0204ff309e>:2: MatplotlibDeprecationWarning: Auto-removal of overlapping axes is deprecated since 3.6 and will be removed two minor releases later; explicitly call ax.remove() as needed.\n","  plt.subplot(2, 3, 1)\n","<ipython-input-44-6c0204ff309e>:3: FutureWarning: \n","\n","`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n","This will become an error in seaborn v0.14.0; please update your code.\n","\n","  sns.kdeplot(df.Age,shade=True, color='Blue')\n","<ipython-input-44-6c0204ff309e>:5: FutureWarning: \n","\n","`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n","This will become an error in seaborn v0.14.0; please update your code.\n","\n","  sns.kdeplot(df.Length,shade=True, color='Orange')\n","<ipython-input-44-6c0204ff309e>:7: FutureWarning: \n","\n","`shade` is now deprecated in favor of `fill`; setting `fill=True`.\n","This will become an error in seaborn v0.14.0; please update your code.\n","\n","  sns.kdeplot(df.Weight,shade=True, color='Green')\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Weight', ylabel='Density'>"]},"metadata":{},"execution_count":44},{"output_type":"display_data","data":{"text/plain":["<Figure size 1700x1800 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["# write code that yields output similar to the one shown below"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":683},"id":"FlLGlxui0ONc","executionInfo":{"status":"ok","timestamp":1695667603035,"user_tz":-330,"elapsed":2284,"user":{"displayName":"Paarshva Chitaliya","userId":"04104550440418642948"}},"outputId":"cf9c85f3-2a69-4249-a2f0-a610154c4b00"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Weight', ylabel='Density'>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x1000 with 3 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["##scatter plots"],"metadata":{"id":"wylisMOY_3-4"}},{"cell_type":"markdown","source":["Make a scatterplot between Age and Diameter. Resources for the same:\n","\n","https://www.youtube.com/watch?v=4yz4cMXCkuw\n","\n","https://www.cuemath.com/data/scatter-plot/"],"metadata":{"id":"m-hkpXjQBkCM"}},{"cell_type":"code","source":["# plot the graph here\n","sns.scatterplot(data = df, x='Age', y='Diameter', alpha=0.5)"],"metadata":{"id":"STSreAqp_5xl","colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"status":"ok","timestamp":1724272563013,"user_tz":-330,"elapsed":1814,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"0d9b9937-7296-485e-850d-eb95d5bcb48e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Age', ylabel='Diameter'>"]},"metadata":{},"execution_count":48},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## some more complex analysis"],"metadata":{"id":"u2N1C7mBIS5B"}},{"cell_type":"markdown","source":["Use a function called corr(). Resource:\n","\n","https://data36.com/correlation-definition-calculation-corr-pandas/\n","\n"],"metadata":{"id":"YixxeCxVIYW_"}},{"cell_type":"code","source":["# write code here\n","df = df.drop(columns='Sex')\n","df.corr()"],"metadata":{"id":"LOKZiSKwIXLN","colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"status":"ok","timestamp":1724273963434,"user_tz":-330,"elapsed":444,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"0c37a8fe-2901-45c0-8a21-a2813e2334b0"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                  Length  Diameter    Height    Weight  Shucked Weight  \\\n","Length          1.000000  0.989437  0.918352  0.936374        0.915516   \n","Diameter        0.989437  1.000000  0.921353  0.938249        0.914199   \n","Height          0.918352  0.921353  1.000000  0.901775        0.864083   \n","Weight          0.936374  0.938249  0.901775  1.000000        0.971267   \n","Shucked Weight  0.915516  0.914199  0.864083  0.971267        1.000000   \n","Viscera Weight  0.917855  0.918351  0.883127  0.971062        0.942626   \n","Shell Weight    0.916957  0.922688  0.903398  0.965525        0.910398   \n","Age             0.612843  0.621256  0.638067  0.601195        0.503320   \n","\n","                Viscera Weight  Shell Weight       Age  \n","Length                0.917855      0.916957  0.612843  \n","Diameter              0.918351      0.922688  0.621256  \n","Height                0.883127      0.903398  0.638067  \n","Weight                0.971062      0.965525  0.601195  \n","Shucked Weight        0.942626      0.910398  0.503320  \n","Viscera Weight        1.000000      0.933919  0.576808  \n","Shell Weight          0.933919      1.000000  0.663473  \n","Age                   0.576808      0.663473  1.000000  "],"text/html":["\n","  <div id=\"df-2ca785de-c43e-479c-9f4b-e2be7cfde570\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Length</th>\n","      <td>1.000000</td>\n","      <td>0.989437</td>\n","      <td>0.918352</td>\n","      <td>0.936374</td>\n","      <td>0.915516</td>\n","      <td>0.917855</td>\n","      <td>0.916957</td>\n","      <td>0.612843</td>\n","    </tr>\n","    <tr>\n","      <th>Diameter</th>\n","      <td>0.989437</td>\n","      <td>1.000000</td>\n","      <td>0.921353</td>\n","      <td>0.938249</td>\n","      <td>0.914199</td>\n","      <td>0.918351</td>\n","      <td>0.922688</td>\n","      <td>0.621256</td>\n","    </tr>\n","    <tr>\n","      <th>Height</th>\n","      <td>0.918352</td>\n","      <td>0.921353</td>\n","      <td>1.000000</td>\n","      <td>0.901775</td>\n","      <td>0.864083</td>\n","      <td>0.883127</td>\n","      <td>0.903398</td>\n","      <td>0.638067</td>\n","    </tr>\n","    <tr>\n","      <th>Weight</th>\n","      <td>0.936374</td>\n","      <td>0.938249</td>\n","      <td>0.901775</td>\n","      <td>1.000000</td>\n","      <td>0.971267</td>\n","      <td>0.971062</td>\n","      <td>0.965525</td>\n","      <td>0.601195</td>\n","    </tr>\n","    <tr>\n","      <th>Shucked Weight</th>\n","      <td>0.915516</td>\n","      <td>0.914199</td>\n","      <td>0.864083</td>\n","      <td>0.971267</td>\n","      <td>1.000000</td>\n","      <td>0.942626</td>\n","      <td>0.910398</td>\n","      <td>0.503320</td>\n","    </tr>\n","    <tr>\n","      <th>Viscera Weight</th>\n","      <td>0.917855</td>\n","      <td>0.918351</td>\n","      <td>0.883127</td>\n","      <td>0.971062</td>\n","      <td>0.942626</td>\n","      <td>1.000000</td>\n","      <td>0.933919</td>\n","      <td>0.576808</td>\n","    </tr>\n","    <tr>\n","      <th>Shell Weight</th>\n","      <td>0.916957</td>\n","      <td>0.922688</td>\n","      <td>0.903398</td>\n","      <td>0.965525</td>\n","      <td>0.910398</td>\n","      <td>0.933919</td>\n","      <td>1.000000</td>\n","      <td>0.663473</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0.612843</td>\n","      <td>0.621256</td>\n","      <td>0.638067</td>\n","      <td>0.601195</td>\n","      <td>0.503320</td>\n","      <td>0.576808</td>\n","      <td>0.663473</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2ca785de-c43e-479c-9f4b-e2be7cfde570')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2ca785de-c43e-479c-9f4b-e2be7cfde570 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2ca785de-c43e-479c-9f4b-e2be7cfde570');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-60b2bb1b-fb50-4209-8cd5-2fb283a4c2d6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-60b2bb1b-fb50-4209-8cd5-2fb283a4c2d6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-60b2bb1b-fb50-4209-8cd5-2fb283a4c2d6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12127792650100755,\n        \"min\": 0.6128430827194494,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9894373545605677,\n          0.9178551831964933,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.11867594179299316,\n        \"min\": 0.6212559117491399,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          1.0,\n          0.9183509531626656,\n          0.9894373545605677\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10514288565808315,\n        \"min\": 0.6380669247687574,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9213531477246425,\n          0.8831266166837676,\n          0.9183516793840923\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1284986154056147,\n        \"min\": 0.6011949784108608,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9382486219456632,\n          0.9710618857231458,\n          0.9363737925226442\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15680037119157653,\n        \"min\": 0.5033202398025197,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9141991120706231,\n          0.9426260084646951,\n          0.9155158223382066\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13256545975159878,\n        \"min\": 0.5768077831752708,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9183509531626656,\n          1.0,\n          0.9178551831964933\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1016136781345939,\n        \"min\": 0.6634732811145068,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.9226881999521022,\n          0.9339189986760877,\n          0.9169573389084277\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.14844373871762762,\n        \"min\": 0.5033202398025197,\n        \"max\": 1.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.6212559117491399,\n          0.5768077831752708,\n          0.6128430827194494\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":70}]},{"cell_type":"markdown","source":["If you've been paying attention, the Profile Report above already took care of this. This table basically tells you how every column correlate with each other. Closer the number is to 1, the more they mirror each other."],"metadata":{"id":"XuU2v1CuJmNO"}},{"cell_type":"markdown","source":["From this report, it can be seen that Weight is extremely highly correlated with each of shucked weight, viscera weight and shell weight.\n","\n","To actually understand what this means, we first need to know what all this crab jargon actually is. So, on Googling, you will discover the following meanings:\n","\n","*   Weight - total teight\n","*   Shucked - weight of meat only\n","*   Viscera - gut weight, after bleeding\n","*   Shell - weight after being dried\n","\n","Well, those are some pretty disgusting and gory definitions.\n","\n","Moving past that, we here find that some weight statistics is lost. What about the other potential body parts of a crab? Maybe we need them to accurately predict its (apparently very short) lifespan? Maybe it is actually needed in some future model we choose to implement?\n","\n","So, make a new column called \"Lost Weight\". Use the following formula to populate every row of it:\n","\n","\n","\n","```\n","Weight - (Shucked + Viscera + Shell)\n","```\n"],"metadata":{"id":"iuNkvl5fKQ2O"}},{"cell_type":"markdown","source":["If this operation gives a value of Lost Weight that is less than zero, then assign zero to that row's Lost Weight value. Otherwise, assign one to it."],"metadata":{"id":"xh-BMhAzUNoN"}},{"cell_type":"markdown","source":["Also, ensure that this column is added in between Shell Weight and Age."],"metadata":{"id":"K3gvAHbsVOHc"}},{"cell_type":"code","source":["# write code here Weight - (Shucked + Viscera + Shell)\n","lostWeight = []\n","for i in range(df.shape[0]):\n","  temp = df['Weight'][i] - (df['Shucked Weight'][i] + df['Viscera Weight'][i] + df['Shell Weight'][i])\n","  if temp < 0:\n","    lostWeight.append(0)\n","  else:\n","    lostWeight.append(1)\n","\n","df.insert(7, 'Lost Weight', lostWeight, True)\n","df"],"metadata":{"id":"TfMiPDwzNeC0","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724569248352,"user_tz":-330,"elapsed":6175,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"54e8401a-1b55-465a-bdfb-0e185cc37229"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["          id Sex  Length  Diameter  Height     Weight  Shucked Weight  \\\n","0          0   I  1.5250    1.1750  0.3750  28.973189       12.728926   \n","1          1   I  1.1000    0.8250  0.2750  10.418441        4.521745   \n","2          2   M  1.3875    1.1125  0.3750  24.777463       11.339800   \n","3          3   F  1.7000    1.4125  0.5000  50.660556       20.354941   \n","4          4   I  1.2500    1.0125  0.3375  23.289114       11.977664   \n","...      ...  ..     ...       ...     ...        ...             ...   \n","74046  74046   F  1.6625    1.2625  0.4375  50.660556       20.680960   \n","74047  74047   I  1.0750    0.8625  0.2750  10.446791        4.323299   \n","74048  74048   F  1.4875    1.2000  0.4125  29.483480       12.303683   \n","74049  74049   I  1.2125    0.9625  0.3125  16.768729        8.972617   \n","74050  74050   I  0.9125    0.6750  0.2000   5.386405        2.055339   \n","\n","       Lost Weight  Viscera Weight  Shell Weight  Age  \n","0                1        6.647958      8.348928    9  \n","1                1        2.324659      3.401940    8  \n","2                1        5.556502      6.662133    9  \n","3                1       10.991839     14.996885   11  \n","4                1        4.507570      5.953395    8  \n","...            ...             ...           ...  ...  \n","74046            1       10.361742     12.332033   10  \n","74047            1        2.296310      3.543687    6  \n","74048            1        7.540967      8.079607   10  \n","74049            1        2.919999      4.280774    8  \n","74050            1        1.034757      1.700970    6  \n","\n","[74051 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-b3132376-68ac-4a62-b016-d5227254c2ed\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>Sex</th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Lost Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>I</td>\n","      <td>1.5250</td>\n","      <td>1.1750</td>\n","      <td>0.3750</td>\n","      <td>28.973189</td>\n","      <td>12.728926</td>\n","      <td>1</td>\n","      <td>6.647958</td>\n","      <td>8.348928</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>I</td>\n","      <td>1.1000</td>\n","      <td>0.8250</td>\n","      <td>0.2750</td>\n","      <td>10.418441</td>\n","      <td>4.521745</td>\n","      <td>1</td>\n","      <td>2.324659</td>\n","      <td>3.401940</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>M</td>\n","      <td>1.3875</td>\n","      <td>1.1125</td>\n","      <td>0.3750</td>\n","      <td>24.777463</td>\n","      <td>11.339800</td>\n","      <td>1</td>\n","      <td>5.556502</td>\n","      <td>6.662133</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>F</td>\n","      <td>1.7000</td>\n","      <td>1.4125</td>\n","      <td>0.5000</td>\n","      <td>50.660556</td>\n","      <td>20.354941</td>\n","      <td>1</td>\n","      <td>10.991839</td>\n","      <td>14.996885</td>\n","      <td>11</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>I</td>\n","      <td>1.2500</td>\n","      <td>1.0125</td>\n","      <td>0.3375</td>\n","      <td>23.289114</td>\n","      <td>11.977664</td>\n","      <td>1</td>\n","      <td>4.507570</td>\n","      <td>5.953395</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74046</th>\n","      <td>74046</td>\n","      <td>F</td>\n","      <td>1.6625</td>\n","      <td>1.2625</td>\n","      <td>0.4375</td>\n","      <td>50.660556</td>\n","      <td>20.680960</td>\n","      <td>1</td>\n","      <td>10.361742</td>\n","      <td>12.332033</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74047</th>\n","      <td>74047</td>\n","      <td>I</td>\n","      <td>1.0750</td>\n","      <td>0.8625</td>\n","      <td>0.2750</td>\n","      <td>10.446791</td>\n","      <td>4.323299</td>\n","      <td>1</td>\n","      <td>2.296310</td>\n","      <td>3.543687</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>74048</th>\n","      <td>74048</td>\n","      <td>F</td>\n","      <td>1.4875</td>\n","      <td>1.2000</td>\n","      <td>0.4125</td>\n","      <td>29.483480</td>\n","      <td>12.303683</td>\n","      <td>1</td>\n","      <td>7.540967</td>\n","      <td>8.079607</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>74049</th>\n","      <td>74049</td>\n","      <td>I</td>\n","      <td>1.2125</td>\n","      <td>0.9625</td>\n","      <td>0.3125</td>\n","      <td>16.768729</td>\n","      <td>8.972617</td>\n","      <td>1</td>\n","      <td>2.919999</td>\n","      <td>4.280774</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>74050</th>\n","      <td>74050</td>\n","      <td>I</td>\n","      <td>0.9125</td>\n","      <td>0.6750</td>\n","      <td>0.2000</td>\n","      <td>5.386405</td>\n","      <td>2.055339</td>\n","      <td>1</td>\n","      <td>1.034757</td>\n","      <td>1.700970</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74051 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b3132376-68ac-4a62-b016-d5227254c2ed')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-b3132376-68ac-4a62-b016-d5227254c2ed button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-b3132376-68ac-4a62-b016-d5227254c2ed');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-6f315468-7170-47ff-9cd4-78de0ecbe01a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f315468-7170-47ff-9cd4-78de0ecbe01a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-6f315468-7170-47ff-9cd4-78de0ecbe01a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_4731fbcf-aec0-4dc2-9628-dea594c09e80\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_4731fbcf-aec0-4dc2-9628-dea594c09e80 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 74051,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21376,\n        \"min\": 0,\n        \"max\": 74050,\n        \"num_unique_values\": 74051,\n        \"samples\": [\n          27233,\n          55493,\n          49980\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"I\",\n          \"M\",\n          \"F\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28775712570464246,\n        \"min\": 0.1875,\n        \"max\": 2.0128145,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.55,\n          1.0875,\n          0.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23739627818899556,\n        \"min\": 0.1375,\n        \"max\": 1.6125,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1.2,\n          0.55,\n          1.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09203396050696379,\n        \"min\": 0.0,\n        \"max\": 2.825,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.41,\n          0.775,\n          0.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.648153002843257,\n        \"min\": 0.056699,\n        \"max\": 80.10151225,\n        \"num_unique_values\": 3096,\n        \"samples\": [\n          5.99591925,\n          32.6302745,\n          13.48018725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.618025350822559,\n        \"min\": 0.0283495,\n        \"max\": 42.184056,\n        \"num_unique_values\": 1766,\n        \"samples\": [\n          26.7902775,\n          12.60135275,\n          17.05222425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lost Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7927287058162005,\n        \"min\": 0.04252425,\n        \"max\": 21.54562,\n        \"num_unique_values\": 967,\n        \"samples\": [\n          4.12485225,\n          2.948348\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5843721003973585,\n        \"min\": 0.04252425,\n        \"max\": 28.4912475,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          9.808927,\n          12.14776075\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          13,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["\n","To see how the crabs having no Lost Weight compare with those having some with respect to age, lets draw a violin plot. Resources:\n","\n","https://www.youtube.com/watch?v=PNNLefP974M\n","\n","https://seaborn.pydata.org/generated/seaborn.violinplot.html\n","\n","Code it below now. Here, x is the Lost Weight, and y is the Age."],"metadata":{"id":"x67-hzNzW1Wl"}},{"cell_type":"code","source":["# plot the graph here\n","sns.violinplot(data=df, x='Lost Weight', y='Age')"],"metadata":{"id":"WPeEjrXSYbue","colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"status":"ok","timestamp":1724569256061,"user_tz":-330,"elapsed":1587,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"75229889-b9fb-4504-e53b-cf6e72227b32"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Axes: xlabel='Lost Weight', ylabel='Age'>"]},"metadata":{},"execution_count":18},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["##make a plot of your own choosing!"],"metadata":{"id":"UMYZ_LxQDMG8"}},{"cell_type":"markdown","source":["Bar charts usually just tell you the count of some items in a dataset. While that is useful, it doesn't really say much about the distribution of those items in that dataset. That's where boxplots come in: to tell you the characteristics of data. For more information:\n","\n","https://www.nature.com/articles/nmeth.2807"],"metadata":{"id":"T8xY8ns89hpI"}},{"cell_type":"markdown","source":["Below is a link to the gallery of various plots available in seaborn.\n","\n","https://seaborn.pydata.org/examples/index.html\n","\n","You have free rein to make any type of graph (that is not what we have exactly done above, obviously), between any parameters you want to compare. Make it nice to look at, and also below the plot write what relevant insight you obtained from it."],"metadata":{"id":"6onzxmQuDkus"}},{"cell_type":"code","source":["# creativity batao"],"metadata":{"id":"8lZ7WbrbDkEz"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["insight yaha likho"],"metadata":{"id":"qLxgKqzPTYc5"}},{"cell_type":"markdown","source":["#one hot encoding"],"metadata":{"id":"fc5m48dMWkST"}},{"cell_type":"markdown","source":["Machine Learning algorithms can only crunch numbers. Give it a string or text input, and it self-annihilates by throwing an error. To handle this, we use a technique called one hot encoding. Read up on it here:\n","\n","https://datagy.io/pandas-get-dummies/\n","\n","Then, apply it to the column titled \"Sex.\""],"metadata":{"id":"awF6yCWxXGDJ"}},{"cell_type":"code","source":["df2 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/ML Tasks/Week1/train.csv')\n","df2\n","df2 = df2.drop('id', axis=1)"],"metadata":{"id":"IVR8JTXwDz9e"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# write code here\n","df2 = pd.get_dummies(data = df2, columns=['Sex'], dtype = int)\n","df2"],"metadata":{"id":"pALMgRtPXysz","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1724350177405,"user_tz":-330,"elapsed":654,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"8349b896-8322-4c7d-db91-779bb83577f4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       Length  Diameter  Height     Weight  Shucked Weight  Viscera Weight  \\\n","0      1.5250    1.1750  0.3750  28.973189       12.728926        6.647958   \n","1      1.1000    0.8250  0.2750  10.418441        4.521745        2.324659   \n","2      1.3875    1.1125  0.3750  24.777463       11.339800        5.556502   \n","3      1.7000    1.4125  0.5000  50.660556       20.354941       10.991839   \n","4      1.2500    1.0125  0.3375  23.289114       11.977664        4.507570   \n","...       ...       ...     ...        ...             ...             ...   \n","74046  1.6625    1.2625  0.4375  50.660556       20.680960       10.361742   \n","74047  1.0750    0.8625  0.2750  10.446791        4.323299        2.296310   \n","74048  1.4875    1.2000  0.4125  29.483480       12.303683        7.540967   \n","74049  1.2125    0.9625  0.3125  16.768729        8.972617        2.919999   \n","74050  0.9125    0.6750  0.2000   5.386405        2.055339        1.034757   \n","\n","       Shell Weight  Age  Sex_F  Sex_I  Sex_M  \n","0          8.348928    9      0      1      0  \n","1          3.401940    8      0      1      0  \n","2          6.662133    9      0      0      1  \n","3         14.996885   11      1      0      0  \n","4          5.953395    8      0      1      0  \n","...             ...  ...    ...    ...    ...  \n","74046     12.332033   10      1      0      0  \n","74047      3.543687    6      0      1      0  \n","74048      8.079607   10      1      0      0  \n","74049      4.280774    8      0      1      0  \n","74050      1.700970    6      0      1      0  \n","\n","[74051 rows x 11 columns]"],"text/html":["\n","  <div id=\"df-a48aa7cd-80f3-4d18-8074-26e05cbd2b84\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Length</th>\n","      <th>Diameter</th>\n","      <th>Height</th>\n","      <th>Weight</th>\n","      <th>Shucked Weight</th>\n","      <th>Viscera Weight</th>\n","      <th>Shell Weight</th>\n","      <th>Age</th>\n","      <th>Sex_F</th>\n","      <th>Sex_I</th>\n","      <th>Sex_M</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1.5250</td>\n","      <td>1.1750</td>\n","      <td>0.3750</td>\n","      <td>28.973189</td>\n","      <td>12.728926</td>\n","      <td>6.647958</td>\n","      <td>8.348928</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.1000</td>\n","      <td>0.8250</td>\n","      <td>0.2750</td>\n","      <td>10.418441</td>\n","      <td>4.521745</td>\n","      <td>2.324659</td>\n","      <td>3.401940</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1.3875</td>\n","      <td>1.1125</td>\n","      <td>0.3750</td>\n","      <td>24.777463</td>\n","      <td>11.339800</td>\n","      <td>5.556502</td>\n","      <td>6.662133</td>\n","      <td>9</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.7000</td>\n","      <td>1.4125</td>\n","      <td>0.5000</td>\n","      <td>50.660556</td>\n","      <td>20.354941</td>\n","      <td>10.991839</td>\n","      <td>14.996885</td>\n","      <td>11</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1.2500</td>\n","      <td>1.0125</td>\n","      <td>0.3375</td>\n","      <td>23.289114</td>\n","      <td>11.977664</td>\n","      <td>4.507570</td>\n","      <td>5.953395</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>74046</th>\n","      <td>1.6625</td>\n","      <td>1.2625</td>\n","      <td>0.4375</td>\n","      <td>50.660556</td>\n","      <td>20.680960</td>\n","      <td>10.361742</td>\n","      <td>12.332033</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>74047</th>\n","      <td>1.0750</td>\n","      <td>0.8625</td>\n","      <td>0.2750</td>\n","      <td>10.446791</td>\n","      <td>4.323299</td>\n","      <td>2.296310</td>\n","      <td>3.543687</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>74048</th>\n","      <td>1.4875</td>\n","      <td>1.2000</td>\n","      <td>0.4125</td>\n","      <td>29.483480</td>\n","      <td>12.303683</td>\n","      <td>7.540967</td>\n","      <td>8.079607</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>74049</th>\n","      <td>1.2125</td>\n","      <td>0.9625</td>\n","      <td>0.3125</td>\n","      <td>16.768729</td>\n","      <td>8.972617</td>\n","      <td>2.919999</td>\n","      <td>4.280774</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>74050</th>\n","      <td>0.9125</td>\n","      <td>0.6750</td>\n","      <td>0.2000</td>\n","      <td>5.386405</td>\n","      <td>2.055339</td>\n","      <td>1.034757</td>\n","      <td>1.700970</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>74051 rows × 11 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a48aa7cd-80f3-4d18-8074-26e05cbd2b84')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a48aa7cd-80f3-4d18-8074-26e05cbd2b84 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a48aa7cd-80f3-4d18-8074-26e05cbd2b84');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-19e12325-804f-4ded-b833-4fbeef305ff5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-19e12325-804f-4ded-b833-4fbeef305ff5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-19e12325-804f-4ded-b833-4fbeef305ff5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_2047f658-982a-44fc-a756-d3981d254e21\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df2')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_2047f658-982a-44fc-a756-d3981d254e21 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df2');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df2","summary":"{\n  \"name\": \"df2\",\n  \"rows\": 74051,\n  \"fields\": [\n    {\n      \"column\": \"Length\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.28775712570464246,\n        \"min\": 0.1875,\n        \"max\": 2.0128145,\n        \"num_unique_values\": 144,\n        \"samples\": [\n          0.55,\n          1.0875,\n          0.425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Diameter\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.23739627818899556,\n        \"min\": 0.1375,\n        \"max\": 1.6125,\n        \"num_unique_values\": 122,\n        \"samples\": [\n          1.2,\n          0.55,\n          1.05\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.09203396050696379,\n        \"min\": 0.0,\n        \"max\": 2.825,\n        \"num_unique_values\": 65,\n        \"samples\": [\n          0.41,\n          0.775,\n          0.375\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12.648153002843257,\n        \"min\": 0.056699,\n        \"max\": 80.10151225,\n        \"num_unique_values\": 3096,\n        \"samples\": [\n          5.99591925,\n          32.6302745,\n          13.48018725\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shucked Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.618025350822559,\n        \"min\": 0.0283495,\n        \"max\": 42.184056,\n        \"num_unique_values\": 1766,\n        \"samples\": [\n          26.7902775,\n          12.60135275,\n          17.05222425\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Viscera Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.7927287058162005,\n        \"min\": 0.04252425,\n        \"max\": 21.54562,\n        \"num_unique_values\": 967,\n        \"samples\": [\n          4.12485225,\n          2.948348,\n          3.0900955\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Shell Weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5843721003973585,\n        \"min\": 0.04252425,\n        \"max\": 28.4912475,\n        \"num_unique_values\": 1048,\n        \"samples\": [\n          9.808927,\n          12.14776075,\n          8.107957\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 29,\n        \"num_unique_values\": 28,\n        \"samples\": [\n          13,\n          29,\n          6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_F\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_I\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Sex_M\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":37}]},{"cell_type":"markdown","source":["If correctly implemented, you will observe three new columns are added, namely, \"Sex_F\", \"Sex_I\" and \"Sex_M.\" The old \"Sex\" column is now gone."],"metadata":{"id":"NQvibNzWYUKF"}},{"cell_type":"markdown","source":["#normalisation and standardisation"],"metadata":{"id":"4w5Ss5UXTtT8"}},{"cell_type":"markdown","source":["To prevent some data features from dominating the model training process, we implement the above two feature scaling techniques."],"metadata":{"id":"NTZGTA_zWxDC"}},{"cell_type":"markdown","source":["Go through the below resource:\n","\n","https://www.analyticsvidhya.com/blog/2020/04/feature-scaling-machine-learning-normalization-standardization/"],"metadata":{"id":"OWZkOtGOTxIx"}},{"cell_type":"markdown","source":["Normalise the dataset."],"metadata":{"id":"DjhPYc3DVvZK"}},{"cell_type":"code","source":["# plot the graph here"],"metadata":{"id":"RVHpmBEqVuoi"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["For standardisation, bear in mind that the one hot encoded columns are not standardised. They are categorical in nature, so it makes no sense to shoehorn them into any type of distribution at all.\n","\n","But, its ok to normalise them, as it will be scaled down to values between 0 and 1, which is the range in which they already exist anyways. Normalisation doesn't affect them."],"metadata":{"id":"sx1SHNW5Z-PR"}},{"cell_type":"code","source":["\n","# one hot encode the Sex column before running the next cell\n","normalized_df = df2\n","\n","for column in df.columns:\n","  xmin = df[column].min()\n","  xmax = df[column].max()\n","  normalized_df[column] = (df[column] - xmin) / (xmax - xmin)\n","\n","  print(df2)"],"metadata":{"id":"bKS68cnxbTK6","colab":{"base_uri":"https://localhost:8080/","height":914},"executionInfo":{"status":"error","timestamp":1724350199862,"user_tz":-330,"elapsed":446,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"36ccb842-5d9e-4350-9db0-f55059508957"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["       Length  Diameter  Height     Weight  Shucked Weight  Viscera Weight  \\\n","0      1.5250    1.1750  0.3750  28.973189       12.728926        6.647958   \n","1      1.1000    0.8250  0.2750  10.418441        4.521745        2.324659   \n","2      1.3875    1.1125  0.3750  24.777463       11.339800        5.556502   \n","3      1.7000    1.4125  0.5000  50.660556       20.354941       10.991839   \n","4      1.2500    1.0125  0.3375  23.289114       11.977664        4.507570   \n","...       ...       ...     ...        ...             ...             ...   \n","74046  1.6625    1.2625  0.4375  50.660556       20.680960       10.361742   \n","74047  1.0750    0.8625  0.2750  10.446791        4.323299        2.296310   \n","74048  1.4875    1.2000  0.4125  29.483480       12.303683        7.540967   \n","74049  1.2125    0.9625  0.3125  16.768729        8.972617        2.919999   \n","74050  0.9125    0.6750  0.2000   5.386405        2.055339        1.034757   \n","\n","       Shell Weight  Age  Sex_F  Sex_I  Sex_M        id  \n","0          8.348928    9      0      1      0  0.000000  \n","1          3.401940    8      0      1      0  0.000014  \n","2          6.662133    9      0      0      1  0.000027  \n","3         14.996885   11      1      0      0  0.000041  \n","4          5.953395    8      0      1      0  0.000054  \n","...             ...  ...    ...    ...    ...       ...  \n","74046     12.332033   10      1      0      0  0.999946  \n","74047      3.543687    6      0      1      0  0.999959  \n","74048      8.079607   10      1      0      0  0.999973  \n","74049      4.280774    8      0      1      0  0.999986  \n","74050      1.700970    6      0      1      0  1.000000  \n","\n","[74051 rows x 12 columns]\n"]},{"output_type":"error","ename":"TypeError","evalue":"unsupported operand type(s) for -: 'str' and 'str'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36m_na_arithmetic_op\u001b[0;34m(left, right, op, is_cmp)\u001b[0m\n\u001b[1;32m    219\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 220\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    221\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'str' and 'str'","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-39-736887ef5f72>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0mxmin\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m   \u001b[0mxmax\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m   \u001b[0mnormalized_df\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumn\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mxmin\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mxmax\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mxmin\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m   \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__sub__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    192\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__sub__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__sub__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msub\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__rsub__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/series.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   5817\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5818\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5819\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mbase\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mIndexOpsMixin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5820\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5821\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_align_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0malign_asobject\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/base.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   1379\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1380\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1381\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1382\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1383\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mres_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36marithmetic_op\u001b[0;34m(left, right, op)\u001b[0m\n\u001b[1;32m    283\u001b[0m         \u001b[0;31m# error: Argument 1 to \"_na_arithmetic_op\" has incompatible type\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    284\u001b[0m         \u001b[0;31m# \"Union[ExtensionArray, ndarray[Any, Any]]\"; expected \"ndarray[Any, Any]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 285\u001b[0;31m         \u001b[0mres_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_na_arithmetic_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    286\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    287\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mres_values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36m_na_arithmetic_op\u001b[0;34m(left, right, op, is_cmp)\u001b[0m\n\u001b[1;32m    227\u001b[0m             \u001b[0;31m# Don't do this for comparisons, as that will handle complex numbers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    228\u001b[0m             \u001b[0;31m#  incorrectly, see GH#32047\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 229\u001b[0;31m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_masked_arith_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mright\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    230\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    231\u001b[0m             \u001b[0;32mraise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/ops/array_ops.py\u001b[0m in \u001b[0;36m_masked_arith_op\u001b[0;34m(x, y, op)\u001b[0m\n\u001b[1;32m    182\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 184\u001b[0;31m             \u001b[0mresult\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxrav\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m     \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mputmask\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m~\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnan\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'str' and 'str'"]}]},{"cell_type":"markdown","source":["Standardise df_std such that the one hot label encoded columns aren't affected."],"metadata":{"id":"uuE-EjCoeo88"}},{"cell_type":"code","source":["import pandas as pd\n","\n","# Sample DataFrame\n","data = {'Value1': [10, 20, 30], 'Value2': [100, 200, 300], 'Value3': [1000, 2000, 3000]}\n","df = pd.DataFrame(data)\n","\n","# Apply the formula (x - xmin) / (xmax - xmin) to each column\n","normalized_df = pd.DataFrame()\n","\n","for column in df.columns:\n","    xmin = df[column].min()\n","    xmax = df[column].max()\n","    normalized_df[column] = (df[column] - xmin) / (xmax - xmin)\n","\n","# Print the normalized DataFrame\n","for index, row in normalized_df.iterrows():\n","    print(row)\n"],"metadata":{"id":"hfJIvTEcZ72W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1724349837269,"user_tz":-330,"elapsed":425,"user":{"displayName":"Tanish A Shah","userId":"17850583122431649893"}},"outputId":"3041c475-cb6f-42cb-fb7d-6b0e6484c779"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Value1    0.0\n","Value2    0.0\n","Value3    0.0\n","Name: 0, dtype: float64\n","Value1    0.5\n","Value2    0.5\n","Value3    0.5\n","Name: 1, dtype: float64\n","Value1    1.0\n","Value2    1.0\n","Value3    1.0\n","Name: 2, dtype: float64\n"]}]}]}